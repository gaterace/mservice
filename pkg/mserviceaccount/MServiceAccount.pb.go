// Copyright 2019-2020 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MServiceAccount.proto


/*
Package mserviceaccount is a generated protocol buffer package.

It is generated from these files:
	MServiceAccount.proto

It has these top-level messages:
	Account
	AccountUser
	AccountRole
	AccountRoleMap
	Claim
	ClaimValue
	RoleClaimMap
	LoginRequest
	LoginResponse
	CreateAccountRequest
	CreateAccountResponse
	UpdateAccountRequest
	UpdateAccountResponse
	DeleteAccountRequest
	DeleteAccountResponse
	GetAccountByIdRequest
	GetAccountByIdResponse
	GetAccountByNameRequest
	GetAccountByNameResponse
	GetAccountNamesRequest
	GetAccountNamesResponse
	CreateAccountUserRequest
	CreateAccountUserResponse
	UpdateAccountUserRequest
	UpdateAccountUserResponse
	UpdateAccountUserPasswordRequest
	UpdateAccountUserPasswordResponse
	DeleteAccountUserRequest
	DeleteAccountUserResponse
	GetAccountUserByIdRequest
	GetAccountUserByIdResponse
	GetAccountUserByEmailRequest
	GetAccountUserByEmailResponse
	GetAccountUsersRequest
	GetAccountUsersResponse
	CreateClaimNameRequest
	CreateClaimNameResponse
	UpdateClaimNameRequest
	UpdateClaimNameResponse
	DeleteClaimNameRequest
	DeleteClaimNameResponse
	GetClaimNamesRequest
	GetClaimNamesResponse
	CreateClaimValueRequest
	CreateClaimValueResponse
	UpdateClaimValueRequest
	UpdateClaimValueResponse
	DeleteClaimValueRequest
	DeleteClaimValueResponse
	GetClaimValueByIdRequest
	GetClaimValueByIdResponse
	GetClaimValuesByNameIdRequest
	GetClaimValuesByNameIdResponse
	GetClaimValuesRequest
	GetClaimValuesResponse
	CreateAccountRoleRequest
	CreateAccountRoleResponse
	UpdateAccountRoleRequest
	UpdateAccountRoleResponse
	DeleteAccountRoleRequest
	DeleteAccountRoleResponse
	GetAccountRoleByIdRequest
	GetAccountRoleByIdResponse
	GetAccountRolesRequest
	GetAccountRolesResponse
	AddUserToRoleRequest
	AddUserToRoleResponse
	RemoveUserFromRoleRequest
	RemoveUserFromRoleResponse
	AddClaimToRoleRequest
	AddClaimToRoleResponse
	RemoveClaimFromRoleRequest
	RemoveClaimFromRoleResponse
	GetServerVersionRequest
	GetServerVersionResponse
*/
package mserviceaccount

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dml "github.com/gaterace/dml-go/pkg/dml"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MService account entity
type Account struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// name for account
	AccountName string `protobuf:"bytes,7,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// long name for account
	AccountLongName string `protobuf:"bytes,8,opt,name=account_long_name,json=accountLongName" json:"account_long_name,omitempty"`
	// account_type
	AccountType int32 `protobuf:"varint,9,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	// account address line 1
	Address1 string `protobuf:"bytes,10,opt,name=address1" json:"address1,omitempty"`
	// account address line 2
	Address2 string `protobuf:"bytes,11,opt,name=address2" json:"address2,omitempty"`
	// account address city
	City string `protobuf:"bytes,12,opt,name=city" json:"city,omitempty"`
	// account address state
	State string `protobuf:"bytes,13,opt,name=state" json:"state,omitempty"`
	// account address postal or zip code
	PostalCode string `protobuf:"bytes,14,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// account address country code
	CountryCode string `protobuf:"bytes,15,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// account phone number
	Phone string `protobuf:"bytes,16,opt,name=phone" json:"phone,omitempty"`
	// email address
	Email string `protobuf:"bytes,17,opt,name=email" json:"email,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Account) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Account) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Account) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Account) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Account) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Account) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *Account) GetAccountLongName() string {
	if m != nil {
		return m.AccountLongName
	}
	return ""
}

func (m *Account) GetAccountType() int32 {
	if m != nil {
		return m.AccountType
	}
	return 0
}

func (m *Account) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *Account) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *Account) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Account) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Account) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Account) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Account) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// MService account user entity
type AccountUser struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,7,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// email address
	Email string `protobuf:"bytes,8,opt,name=email" json:"email,omitempty"`
	// account user full name
	UserFullName string `protobuf:"bytes,9,opt,name=user_full_name,json=userFullName" json:"user_full_name,omitempty"`
	// type of account user
	UserType int32 `protobuf:"varint,10,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	// account user encrypted password hash
	PasswordEnc string `protobuf:"bytes,11,opt,name=password_enc,json=passwordEnc" json:"password_enc,omitempty"`
	// list of account role objects
	AccountRoles []*AccountRole `protobuf:"bytes,12,rep,name=account_roles,json=accountRoles" json:"account_roles,omitempty"`
}

func (m *AccountUser) Reset()                    { *m = AccountUser{} }
func (m *AccountUser) String() string            { return proto.CompactTextString(m) }
func (*AccountUser) ProtoMessage()               {}
func (*AccountUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AccountUser) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *AccountUser) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *AccountUser) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *AccountUser) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *AccountUser) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AccountUser) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AccountUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountUser) GetUserFullName() string {
	if m != nil {
		return m.UserFullName
	}
	return ""
}

func (m *AccountUser) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *AccountUser) GetPasswordEnc() string {
	if m != nil {
		return m.PasswordEnc
	}
	return ""
}

func (m *AccountUser) GetAccountRoles() []*AccountRole {
	if m != nil {
		return m.AccountRoles
	}
	return nil
}

// MService account role entity
type AccountRole struct {
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,7,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// descriptive name for role
	RoleName string `protobuf:"bytes,8,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	// list of claim value objects
	ClaimValues []*ClaimValue `protobuf:"bytes,9,rep,name=claim_values,json=claimValues" json:"claim_values,omitempty"`
}

func (m *AccountRole) Reset()                    { *m = AccountRole{} }
func (m *AccountRole) String() string            { return proto.CompactTextString(m) }
func (*AccountRole) ProtoMessage()               {}
func (*AccountRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountRole) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *AccountRole) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *AccountRole) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *AccountRole) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *AccountRole) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *AccountRole) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AccountRole) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *AccountRole) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *AccountRole) GetClaimValues() []*ClaimValue {
	if m != nil {
		return m.ClaimValues
	}
	return nil
}

// MService account user to role map
type AccountRoleMap struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
}

func (m *AccountRoleMap) Reset()                    { *m = AccountRoleMap{} }
func (m *AccountRoleMap) String() string            { return proto.CompactTextString(m) }
func (*AccountRoleMap) ProtoMessage()               {}
func (*AccountRoleMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountRoleMap) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AccountRoleMap) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *AccountRoleMap) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *AccountRoleMap) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *AccountRoleMap) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

// MService claim name entity
type Claim struct {
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,1,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// claim name
	ClaimName string `protobuf:"bytes,7,opt,name=claim_name,json=claimName" json:"claim_name,omitempty"`
	// claim description
	ClaimDescription string `protobuf:"bytes,8,opt,name=claim_description,json=claimDescription" json:"claim_description,omitempty"`
}

func (m *Claim) Reset()                    { *m = Claim{} }
func (m *Claim) String() string            { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()               {}
func (*Claim) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Claim) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

func (m *Claim) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Claim) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Claim) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Claim) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *Claim) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Claim) GetClaimName() string {
	if m != nil {
		return m.ClaimName
	}
	return ""
}

func (m *Claim) GetClaimDescription() string {
	if m != nil {
		return m.ClaimDescription
	}
	return ""
}

// MService claim value entity
type ClaimValue struct {
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,1,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,7,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
	// claim value
	ClaimVal string `protobuf:"bytes,8,opt,name=claim_val,json=claimVal" json:"claim_val,omitempty"`
	// claim value description
	ClaimValueDescription string `protobuf:"bytes,9,opt,name=claim_value_description,json=claimValueDescription" json:"claim_value_description,omitempty"`
	// single claim object
	Claim *Claim `protobuf:"bytes,10,opt,name=claim" json:"claim,omitempty"`
}

func (m *ClaimValue) Reset()                    { *m = ClaimValue{} }
func (m *ClaimValue) String() string            { return proto.CompactTextString(m) }
func (*ClaimValue) ProtoMessage()               {}
func (*ClaimValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClaimValue) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

func (m *ClaimValue) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ClaimValue) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *ClaimValue) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *ClaimValue) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *ClaimValue) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ClaimValue) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

func (m *ClaimValue) GetClaimVal() string {
	if m != nil {
		return m.ClaimVal
	}
	return ""
}

func (m *ClaimValue) GetClaimValueDescription() string {
	if m != nil {
		return m.ClaimValueDescription
	}
	return ""
}

func (m *ClaimValue) GetClaim() *Claim {
	if m != nil {
		return m.Claim
	}
	return nil
}

type RoleClaimMap struct {
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,2,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
}

func (m *RoleClaimMap) Reset()                    { *m = RoleClaimMap{} }
func (m *RoleClaimMap) String() string            { return proto.CompactTextString(m) }
func (*RoleClaimMap) ProtoMessage()               {}
func (*RoleClaimMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RoleClaimMap) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *RoleClaimMap) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

func (m *RoleClaimMap) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *RoleClaimMap) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *RoleClaimMap) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

// request parameters for method login
type LoginRequest struct {
	// name for account
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// email address
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// password for login
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LoginRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// response parameters for method login
type LoginResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// json web token
	Jwt string `protobuf:"bytes,3,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LoginResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *LoginResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *LoginResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

// request parameters for method create_account
type CreateAccountRequest struct {
	// name for account
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// long name for account
	AccountLongName string `protobuf:"bytes,2,opt,name=account_long_name,json=accountLongName" json:"account_long_name,omitempty"`
	// account_type
	AccountType int32 `protobuf:"varint,3,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	// account address line 1
	Address1 string `protobuf:"bytes,4,opt,name=address1" json:"address1,omitempty"`
	// account address line 2
	Address2 string `protobuf:"bytes,5,opt,name=address2" json:"address2,omitempty"`
	// account address city
	City string `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
	// account address state
	State string `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	// account address postal or zip code
	PostalCode string `protobuf:"bytes,8,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// account address country code
	CountryCode string `protobuf:"bytes,9,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// account phone number
	Phone string `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`
	// email address
	Email string `protobuf:"bytes,11,opt,name=email" json:"email,omitempty"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountLongName() string {
	if m != nil {
		return m.AccountLongName
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountType() int32 {
	if m != nil {
		return m.AccountType
	}
	return 0
}

func (m *CreateAccountRequest) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *CreateAccountRequest) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *CreateAccountRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreateAccountRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CreateAccountRequest) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *CreateAccountRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *CreateAccountRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CreateAccountRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// response parameters for method create_account
type CreateAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *CreateAccountResponse) Reset()                    { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()               {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateAccountResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateAccountResponse) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// request parameters for method update_account
type UpdateAccountRequest struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// name for account
	AccountName string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// long name for account
	AccountLongName string `protobuf:"bytes,4,opt,name=account_long_name,json=accountLongName" json:"account_long_name,omitempty"`
	// account_type
	AccountType int32 `protobuf:"varint,5,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	// account address line 1
	Address1 string `protobuf:"bytes,6,opt,name=address1" json:"address1,omitempty"`
	// account address line 2
	Address2 string `protobuf:"bytes,7,opt,name=address2" json:"address2,omitempty"`
	// account address city
	City string `protobuf:"bytes,8,opt,name=city" json:"city,omitempty"`
	// account address state
	State string `protobuf:"bytes,9,opt,name=state" json:"state,omitempty"`
	// account address postal or zip code
	PostalCode string `protobuf:"bytes,10,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// account address country code
	CountryCode string `protobuf:"bytes,11,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// account phone number
	Phone string `protobuf:"bytes,12,opt,name=phone" json:"phone,omitempty"`
	// email address
	Email string `protobuf:"bytes,13,opt,name=email" json:"email,omitempty"`
}

func (m *UpdateAccountRequest) Reset()                    { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()               {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateAccountRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *UpdateAccountRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *UpdateAccountRequest) GetAccountLongName() string {
	if m != nil {
		return m.AccountLongName
	}
	return ""
}

func (m *UpdateAccountRequest) GetAccountType() int32 {
	if m != nil {
		return m.AccountType
	}
	return 0
}

func (m *UpdateAccountRequest) GetAddress1() string {
	if m != nil {
		return m.Address1
	}
	return ""
}

func (m *UpdateAccountRequest) GetAddress2() string {
	if m != nil {
		return m.Address2
	}
	return ""
}

func (m *UpdateAccountRequest) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdateAccountRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *UpdateAccountRequest) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *UpdateAccountRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpdateAccountRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UpdateAccountRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// response parameters for method update_account
type UpdateAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateAccountResponse) Reset()                    { *m = UpdateAccountResponse{} }
func (m *UpdateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountResponse) ProtoMessage()               {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpdateAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateAccountResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_account
type DeleteAccountRequest struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountRequest) Reset()                    { *m = DeleteAccountRequest{} }
func (m *DeleteAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountRequest) ProtoMessage()               {}
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteAccountRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *DeleteAccountRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_account
type DeleteAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountResponse) Reset()                    { *m = DeleteAccountResponse{} }
func (m *DeleteAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountResponse) ProtoMessage()               {}
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteAccountResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_account_by_id
type GetAccountByIdRequest struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *GetAccountByIdRequest) Reset()                    { *m = GetAccountByIdRequest{} }
func (m *GetAccountByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountByIdRequest) ProtoMessage()               {}
func (*GetAccountByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetAccountByIdRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// response parameters for method get_account_by_id
type GetAccountByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single account object
	Account *Account `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
}

func (m *GetAccountByIdResponse) Reset()                    { *m = GetAccountByIdResponse{} }
func (m *GetAccountByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountByIdResponse) ProtoMessage()               {}
func (*GetAccountByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetAccountByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountByIdResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// request parameters for method get_account_by_name
type GetAccountByNameRequest struct {
	// name for account
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *GetAccountByNameRequest) Reset()                    { *m = GetAccountByNameRequest{} }
func (m *GetAccountByNameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountByNameRequest) ProtoMessage()               {}
func (*GetAccountByNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetAccountByNameRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

// response parameters for method get_account_by_name
type GetAccountByNameResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single account object
	Account *Account `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
}

func (m *GetAccountByNameResponse) Reset()                    { *m = GetAccountByNameResponse{} }
func (m *GetAccountByNameResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountByNameResponse) ProtoMessage()               {}
func (*GetAccountByNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetAccountByNameResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountByNameResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountByNameResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

// request parameters for method get_account_names
type GetAccountNamesRequest struct {
	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam" json:"dummy_param,omitempty"`
}

func (m *GetAccountNamesRequest) Reset()                    { *m = GetAccountNamesRequest{} }
func (m *GetAccountNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountNamesRequest) ProtoMessage()               {}
func (*GetAccountNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetAccountNamesRequest) GetDummyParam() int32 {
	if m != nil {
		return m.DummyParam
	}
	return 0
}

// response parameters for method get_account_names
type GetAccountNamesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// name for account
	AccountName []string `protobuf:"bytes,3,rep,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *GetAccountNamesResponse) Reset()                    { *m = GetAccountNamesResponse{} }
func (m *GetAccountNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountNamesResponse) ProtoMessage()               {}
func (*GetAccountNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetAccountNamesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountNamesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountNamesResponse) GetAccountName() []string {
	if m != nil {
		return m.AccountName
	}
	return nil
}

// request parameters for method create_account_user
type CreateAccountUserRequest struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// email address
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	// account user full name
	UserFullName string `protobuf:"bytes,3,opt,name=user_full_name,json=userFullName" json:"user_full_name,omitempty"`
	// type of account user
	UserType int32 `protobuf:"varint,4,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	// account user encrypted password hash
	PasswordEnc string `protobuf:"bytes,5,opt,name=password_enc,json=passwordEnc" json:"password_enc,omitempty"`
}

func (m *CreateAccountUserRequest) Reset()                    { *m = CreateAccountUserRequest{} }
func (m *CreateAccountUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountUserRequest) ProtoMessage()               {}
func (*CreateAccountUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateAccountUserRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CreateAccountUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateAccountUserRequest) GetUserFullName() string {
	if m != nil {
		return m.UserFullName
	}
	return ""
}

func (m *CreateAccountUserRequest) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

func (m *CreateAccountUserRequest) GetPasswordEnc() string {
	if m != nil {
		return m.PasswordEnc
	}
	return ""
}

// response parameters for method create_account_user
type CreateAccountUserResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *CreateAccountUserResponse) Reset()                    { *m = CreateAccountUserResponse{} }
func (m *CreateAccountUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountUserResponse) ProtoMessage()               {}
func (*CreateAccountUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateAccountUserResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateAccountUserResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateAccountUserResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateAccountUserResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// request parameters for method update_account_user
type UpdateAccountUserRequest struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// email address
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// account user full name
	UserFullName string `protobuf:"bytes,4,opt,name=user_full_name,json=userFullName" json:"user_full_name,omitempty"`
	// type of account user
	UserType int32 `protobuf:"varint,5,opt,name=user_type,json=userType" json:"user_type,omitempty"`
}

func (m *UpdateAccountUserRequest) Reset()                    { *m = UpdateAccountUserRequest{} }
func (m *UpdateAccountUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountUserRequest) ProtoMessage()               {}
func (*UpdateAccountUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *UpdateAccountUserRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateAccountUserRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateAccountUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateAccountUserRequest) GetUserFullName() string {
	if m != nil {
		return m.UserFullName
	}
	return ""
}

func (m *UpdateAccountUserRequest) GetUserType() int32 {
	if m != nil {
		return m.UserType
	}
	return 0
}

// response parameters for method update_account_user
type UpdateAccountUserResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateAccountUserResponse) Reset()                    { *m = UpdateAccountUserResponse{} }
func (m *UpdateAccountUserResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountUserResponse) ProtoMessage()               {}
func (*UpdateAccountUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UpdateAccountUserResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateAccountUserResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateAccountUserResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_account_user_password
type UpdateAccountUserPasswordRequest struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// old password fro password change
	PasswordOld string `protobuf:"bytes,3,opt,name=password_old,json=passwordOld" json:"password_old,omitempty"`
	// account user encrypted password hash
	PasswordEnc string `protobuf:"bytes,4,opt,name=password_enc,json=passwordEnc" json:"password_enc,omitempty"`
}

func (m *UpdateAccountUserPasswordRequest) Reset()         { *m = UpdateAccountUserPasswordRequest{} }
func (m *UpdateAccountUserPasswordRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountUserPasswordRequest) ProtoMessage()    {}
func (*UpdateAccountUserPasswordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *UpdateAccountUserPasswordRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateAccountUserPasswordRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateAccountUserPasswordRequest) GetPasswordOld() string {
	if m != nil {
		return m.PasswordOld
	}
	return ""
}

func (m *UpdateAccountUserPasswordRequest) GetPasswordEnc() string {
	if m != nil {
		return m.PasswordEnc
	}
	return ""
}

// response parameters for method update_account_user_password
type UpdateAccountUserPasswordResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateAccountUserPasswordResponse) Reset()         { *m = UpdateAccountUserPasswordResponse{} }
func (m *UpdateAccountUserPasswordResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountUserPasswordResponse) ProtoMessage()    {}
func (*UpdateAccountUserPasswordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *UpdateAccountUserPasswordResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateAccountUserPasswordResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateAccountUserPasswordResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_account_user
type DeleteAccountUserRequest struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountUserRequest) Reset()                    { *m = DeleteAccountUserRequest{} }
func (m *DeleteAccountUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountUserRequest) ProtoMessage()               {}
func (*DeleteAccountUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *DeleteAccountUserRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DeleteAccountUserRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_account_user
type DeleteAccountUserResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountUserResponse) Reset()                    { *m = DeleteAccountUserResponse{} }
func (m *DeleteAccountUserResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountUserResponse) ProtoMessage()               {}
func (*DeleteAccountUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *DeleteAccountUserResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteAccountUserResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteAccountUserResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_account_user_by_id
type GetAccountUserByIdRequest struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetAccountUserByIdRequest) Reset()                    { *m = GetAccountUserByIdRequest{} }
func (m *GetAccountUserByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountUserByIdRequest) ProtoMessage()               {}
func (*GetAccountUserByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetAccountUserByIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// response parameters for method get_account_user_by_id
type GetAccountUserByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single account user object
	AccountUser *AccountUser `protobuf:"bytes,3,opt,name=account_user,json=accountUser" json:"account_user,omitempty"`
}

func (m *GetAccountUserByIdResponse) Reset()                    { *m = GetAccountUserByIdResponse{} }
func (m *GetAccountUserByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountUserByIdResponse) ProtoMessage()               {}
func (*GetAccountUserByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetAccountUserByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountUserByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountUserByIdResponse) GetAccountUser() *AccountUser {
	if m != nil {
		return m.AccountUser
	}
	return nil
}

// request parameters for method get_account_user_by_email
type GetAccountUserByEmailRequest struct {
	// name for account
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// email address
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *GetAccountUserByEmailRequest) Reset()                    { *m = GetAccountUserByEmailRequest{} }
func (m *GetAccountUserByEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountUserByEmailRequest) ProtoMessage()               {}
func (*GetAccountUserByEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetAccountUserByEmailRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetAccountUserByEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

// response parameters for method get_account_user_by_email
type GetAccountUserByEmailResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single account user object
	AccountUser *AccountUser `protobuf:"bytes,3,opt,name=account_user,json=accountUser" json:"account_user,omitempty"`
}

func (m *GetAccountUserByEmailResponse) Reset()                    { *m = GetAccountUserByEmailResponse{} }
func (m *GetAccountUserByEmailResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountUserByEmailResponse) ProtoMessage()               {}
func (*GetAccountUserByEmailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetAccountUserByEmailResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountUserByEmailResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountUserByEmailResponse) GetAccountUser() *AccountUser {
	if m != nil {
		return m.AccountUser
	}
	return nil
}

// request parameters for method get_account_users
type GetAccountUsersRequest struct {
	// name for account
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *GetAccountUsersRequest) Reset()                    { *m = GetAccountUsersRequest{} }
func (m *GetAccountUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountUsersRequest) ProtoMessage()               {}
func (*GetAccountUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GetAccountUsersRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

// response parameters for method get_account_users
type GetAccountUsersResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of account user objects
	AccountUsers []*AccountUser `protobuf:"bytes,3,rep,name=account_users,json=accountUsers" json:"account_users,omitempty"`
}

func (m *GetAccountUsersResponse) Reset()                    { *m = GetAccountUsersResponse{} }
func (m *GetAccountUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountUsersResponse) ProtoMessage()               {}
func (*GetAccountUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetAccountUsersResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountUsersResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountUsersResponse) GetAccountUsers() []*AccountUser {
	if m != nil {
		return m.AccountUsers
	}
	return nil
}

// request parameters for method create_claim_name
type CreateClaimNameRequest struct {
	// claim name
	ClaimName string `protobuf:"bytes,1,opt,name=claim_name,json=claimName" json:"claim_name,omitempty"`
	// claim description
	ClaimDescription string `protobuf:"bytes,2,opt,name=claim_description,json=claimDescription" json:"claim_description,omitempty"`
}

func (m *CreateClaimNameRequest) Reset()                    { *m = CreateClaimNameRequest{} }
func (m *CreateClaimNameRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateClaimNameRequest) ProtoMessage()               {}
func (*CreateClaimNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CreateClaimNameRequest) GetClaimName() string {
	if m != nil {
		return m.ClaimName
	}
	return ""
}

func (m *CreateClaimNameRequest) GetClaimDescription() string {
	if m != nil {
		return m.ClaimDescription
	}
	return ""
}

// response parameters for method create_claim_name
type CreateClaimNameResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,4,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
}

func (m *CreateClaimNameResponse) Reset()                    { *m = CreateClaimNameResponse{} }
func (m *CreateClaimNameResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateClaimNameResponse) ProtoMessage()               {}
func (*CreateClaimNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CreateClaimNameResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateClaimNameResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateClaimNameResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateClaimNameResponse) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

// request parameters for method update_claim_name
type UpdateClaimNameRequest struct {
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,1,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// claim name
	ClaimName string `protobuf:"bytes,3,opt,name=claim_name,json=claimName" json:"claim_name,omitempty"`
	// claim description
	ClaimDescription string `protobuf:"bytes,4,opt,name=claim_description,json=claimDescription" json:"claim_description,omitempty"`
}

func (m *UpdateClaimNameRequest) Reset()                    { *m = UpdateClaimNameRequest{} }
func (m *UpdateClaimNameRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateClaimNameRequest) ProtoMessage()               {}
func (*UpdateClaimNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *UpdateClaimNameRequest) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

func (m *UpdateClaimNameRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateClaimNameRequest) GetClaimName() string {
	if m != nil {
		return m.ClaimName
	}
	return ""
}

func (m *UpdateClaimNameRequest) GetClaimDescription() string {
	if m != nil {
		return m.ClaimDescription
	}
	return ""
}

// response parameters for method update_claim_name
type UpdateClaimNameResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateClaimNameResponse) Reset()                    { *m = UpdateClaimNameResponse{} }
func (m *UpdateClaimNameResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateClaimNameResponse) ProtoMessage()               {}
func (*UpdateClaimNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *UpdateClaimNameResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateClaimNameResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateClaimNameResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_claim_name
type DeleteClaimNameRequest struct {
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,1,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteClaimNameRequest) Reset()                    { *m = DeleteClaimNameRequest{} }
func (m *DeleteClaimNameRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteClaimNameRequest) ProtoMessage()               {}
func (*DeleteClaimNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeleteClaimNameRequest) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

func (m *DeleteClaimNameRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_claim_name
type DeleteClaimNameResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteClaimNameResponse) Reset()                    { *m = DeleteClaimNameResponse{} }
func (m *DeleteClaimNameResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteClaimNameResponse) ProtoMessage()               {}
func (*DeleteClaimNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DeleteClaimNameResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteClaimNameResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteClaimNameResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_claim_names
type GetClaimNamesRequest struct {
	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam" json:"dummy_param,omitempty"`
}

func (m *GetClaimNamesRequest) Reset()                    { *m = GetClaimNamesRequest{} }
func (m *GetClaimNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClaimNamesRequest) ProtoMessage()               {}
func (*GetClaimNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GetClaimNamesRequest) GetDummyParam() int32 {
	if m != nil {
		return m.DummyParam
	}
	return 0
}

// response parameters for method get_claim_names
type GetClaimNamesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of claim objects
	Claims []*Claim `protobuf:"bytes,3,rep,name=claims" json:"claims,omitempty"`
}

func (m *GetClaimNamesResponse) Reset()                    { *m = GetClaimNamesResponse{} }
func (m *GetClaimNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClaimNamesResponse) ProtoMessage()               {}
func (*GetClaimNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GetClaimNamesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetClaimNamesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetClaimNamesResponse) GetClaims() []*Claim {
	if m != nil {
		return m.Claims
	}
	return nil
}

// request parameters for method create_claim_value
type CreateClaimValueRequest struct {
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,1,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
	// claim value
	ClaimVal string `protobuf:"bytes,2,opt,name=claim_val,json=claimVal" json:"claim_val,omitempty"`
	// claim value description
	ClaimValueDescription string `protobuf:"bytes,3,opt,name=claim_value_description,json=claimValueDescription" json:"claim_value_description,omitempty"`
}

func (m *CreateClaimValueRequest) Reset()                    { *m = CreateClaimValueRequest{} }
func (m *CreateClaimValueRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateClaimValueRequest) ProtoMessage()               {}
func (*CreateClaimValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *CreateClaimValueRequest) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

func (m *CreateClaimValueRequest) GetClaimVal() string {
	if m != nil {
		return m.ClaimVal
	}
	return ""
}

func (m *CreateClaimValueRequest) GetClaimValueDescription() string {
	if m != nil {
		return m.ClaimValueDescription
	}
	return ""
}

// response parameters for method create_claim_value
type CreateClaimValueResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,4,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
}

func (m *CreateClaimValueResponse) Reset()                    { *m = CreateClaimValueResponse{} }
func (m *CreateClaimValueResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateClaimValueResponse) ProtoMessage()               {}
func (*CreateClaimValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *CreateClaimValueResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateClaimValueResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateClaimValueResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateClaimValueResponse) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

// request parameters for method update_claim_value
type UpdateClaimValueRequest struct {
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,1,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// claim value
	ClaimVal string `protobuf:"bytes,3,opt,name=claim_val,json=claimVal" json:"claim_val,omitempty"`
	// claim value description
	ClaimValueDescription string `protobuf:"bytes,4,opt,name=claim_value_description,json=claimValueDescription" json:"claim_value_description,omitempty"`
}

func (m *UpdateClaimValueRequest) Reset()                    { *m = UpdateClaimValueRequest{} }
func (m *UpdateClaimValueRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateClaimValueRequest) ProtoMessage()               {}
func (*UpdateClaimValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *UpdateClaimValueRequest) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

func (m *UpdateClaimValueRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateClaimValueRequest) GetClaimVal() string {
	if m != nil {
		return m.ClaimVal
	}
	return ""
}

func (m *UpdateClaimValueRequest) GetClaimValueDescription() string {
	if m != nil {
		return m.ClaimValueDescription
	}
	return ""
}

// response parameters for method update_claim_value
type UpdateClaimValueResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateClaimValueResponse) Reset()                    { *m = UpdateClaimValueResponse{} }
func (m *UpdateClaimValueResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateClaimValueResponse) ProtoMessage()               {}
func (*UpdateClaimValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *UpdateClaimValueResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateClaimValueResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateClaimValueResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_claim_value
type DeleteClaimValueRequest struct {
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,1,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteClaimValueRequest) Reset()                    { *m = DeleteClaimValueRequest{} }
func (m *DeleteClaimValueRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteClaimValueRequest) ProtoMessage()               {}
func (*DeleteClaimValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *DeleteClaimValueRequest) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

func (m *DeleteClaimValueRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_claim_value
type DeleteClaimValueResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteClaimValueResponse) Reset()                    { *m = DeleteClaimValueResponse{} }
func (m *DeleteClaimValueResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteClaimValueResponse) ProtoMessage()               {}
func (*DeleteClaimValueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *DeleteClaimValueResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteClaimValueResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteClaimValueResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_claim_value_by_id
type GetClaimValueByIdRequest struct {
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,1,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
}

func (m *GetClaimValueByIdRequest) Reset()                    { *m = GetClaimValueByIdRequest{} }
func (m *GetClaimValueByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClaimValueByIdRequest) ProtoMessage()               {}
func (*GetClaimValueByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GetClaimValueByIdRequest) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

// response parameters for method get_claim_value_by_id
type GetClaimValueByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single claim value object
	ClaimValue *ClaimValue `protobuf:"bytes,3,opt,name=claim_value,json=claimValue" json:"claim_value,omitempty"`
}

func (m *GetClaimValueByIdResponse) Reset()                    { *m = GetClaimValueByIdResponse{} }
func (m *GetClaimValueByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClaimValueByIdResponse) ProtoMessage()               {}
func (*GetClaimValueByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *GetClaimValueByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetClaimValueByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetClaimValueByIdResponse) GetClaimValue() *ClaimValue {
	if m != nil {
		return m.ClaimValue
	}
	return nil
}

// request parameters for method get_claim_values_by_name_id
type GetClaimValuesByNameIdRequest struct {
	// unique identifier for an MService claim name
	ClaimNameId int64 `protobuf:"varint,1,opt,name=claim_name_id,json=claimNameId" json:"claim_name_id,omitempty"`
}

func (m *GetClaimValuesByNameIdRequest) Reset()                    { *m = GetClaimValuesByNameIdRequest{} }
func (m *GetClaimValuesByNameIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClaimValuesByNameIdRequest) ProtoMessage()               {}
func (*GetClaimValuesByNameIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *GetClaimValuesByNameIdRequest) GetClaimNameId() int64 {
	if m != nil {
		return m.ClaimNameId
	}
	return 0
}

// response parameters for method get_claim_values_by_name_id
type GetClaimValuesByNameIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single claim value object
	ClaimValue []*ClaimValue `protobuf:"bytes,3,rep,name=claim_value,json=claimValue" json:"claim_value,omitempty"`
}

func (m *GetClaimValuesByNameIdResponse) Reset()                    { *m = GetClaimValuesByNameIdResponse{} }
func (m *GetClaimValuesByNameIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClaimValuesByNameIdResponse) ProtoMessage()               {}
func (*GetClaimValuesByNameIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *GetClaimValuesByNameIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetClaimValuesByNameIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetClaimValuesByNameIdResponse) GetClaimValue() []*ClaimValue {
	if m != nil {
		return m.ClaimValue
	}
	return nil
}

// request parameters for method get_claim_values
type GetClaimValuesRequest struct {
	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam" json:"dummy_param,omitempty"`
}

func (m *GetClaimValuesRequest) Reset()                    { *m = GetClaimValuesRequest{} }
func (m *GetClaimValuesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClaimValuesRequest) ProtoMessage()               {}
func (*GetClaimValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *GetClaimValuesRequest) GetDummyParam() int32 {
	if m != nil {
		return m.DummyParam
	}
	return 0
}

// response parameters for method get_claim_values
type GetClaimValuesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single claim value object
	ClaimValue []*ClaimValue `protobuf:"bytes,3,rep,name=claim_value,json=claimValue" json:"claim_value,omitempty"`
}

func (m *GetClaimValuesResponse) Reset()                    { *m = GetClaimValuesResponse{} }
func (m *GetClaimValuesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClaimValuesResponse) ProtoMessage()               {}
func (*GetClaimValuesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *GetClaimValuesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetClaimValuesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetClaimValuesResponse) GetClaimValue() []*ClaimValue {
	if m != nil {
		return m.ClaimValue
	}
	return nil
}

// request parameters for method create_account_role
type CreateAccountRoleRequest struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// descriptive name for role
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
}

func (m *CreateAccountRoleRequest) Reset()                    { *m = CreateAccountRoleRequest{} }
func (m *CreateAccountRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRoleRequest) ProtoMessage()               {}
func (*CreateAccountRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *CreateAccountRoleRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CreateAccountRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

// response parameters for method create_account_role
type CreateAccountRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,4,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *CreateAccountRoleResponse) Reset()                    { *m = CreateAccountRoleResponse{} }
func (m *CreateAccountRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRoleResponse) ProtoMessage()               {}
func (*CreateAccountRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *CreateAccountRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateAccountRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateAccountRoleResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateAccountRoleResponse) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// request parameters for method update_account_role
type UpdateAccountRoleRequest struct {
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// descriptive name for role
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
}

func (m *UpdateAccountRoleRequest) Reset()                    { *m = UpdateAccountRoleRequest{} }
func (m *UpdateAccountRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRoleRequest) ProtoMessage()               {}
func (*UpdateAccountRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *UpdateAccountRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *UpdateAccountRoleRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateAccountRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

// response parameters for method update_account_role
type UpdateAccountRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateAccountRoleResponse) Reset()                    { *m = UpdateAccountRoleResponse{} }
func (m *UpdateAccountRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRoleResponse) ProtoMessage()               {}
func (*UpdateAccountRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *UpdateAccountRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateAccountRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateAccountRoleResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_account_role
type DeleteAccountRoleRequest struct {
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountRoleRequest) Reset()                    { *m = DeleteAccountRoleRequest{} }
func (m *DeleteAccountRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountRoleRequest) ProtoMessage()               {}
func (*DeleteAccountRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *DeleteAccountRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *DeleteAccountRoleRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_account_role
type DeleteAccountRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountRoleResponse) Reset()                    { *m = DeleteAccountRoleResponse{} }
func (m *DeleteAccountRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountRoleResponse) ProtoMessage()               {}
func (*DeleteAccountRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *DeleteAccountRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteAccountRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteAccountRoleResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_account_role_by_id
type GetAccountRoleByIdRequest struct {
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *GetAccountRoleByIdRequest) Reset()                    { *m = GetAccountRoleByIdRequest{} }
func (m *GetAccountRoleByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRoleByIdRequest) ProtoMessage()               {}
func (*GetAccountRoleByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *GetAccountRoleByIdRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// response parameters for method get_account_role_by_id
type GetAccountRoleByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// single account role object
	AccountRole *AccountRole `protobuf:"bytes,3,opt,name=account_role,json=accountRole" json:"account_role,omitempty"`
}

func (m *GetAccountRoleByIdResponse) Reset()                    { *m = GetAccountRoleByIdResponse{} }
func (m *GetAccountRoleByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRoleByIdResponse) ProtoMessage()               {}
func (*GetAccountRoleByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *GetAccountRoleByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountRoleByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountRoleByIdResponse) GetAccountRole() *AccountRole {
	if m != nil {
		return m.AccountRole
	}
	return nil
}

// request parameters for method get_account_roles
type GetAccountRolesRequest struct {
	// unique identifier for an MService account
	AccountId int64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *GetAccountRolesRequest) Reset()                    { *m = GetAccountRolesRequest{} }
func (m *GetAccountRolesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRolesRequest) ProtoMessage()               {}
func (*GetAccountRolesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *GetAccountRolesRequest) GetAccountId() int64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

// response parameters for method get_account_roles
type GetAccountRolesResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of account role objects
	AccountRoles []*AccountRole `protobuf:"bytes,3,rep,name=account_roles,json=accountRoles" json:"account_roles,omitempty"`
}

func (m *GetAccountRolesResponse) Reset()                    { *m = GetAccountRolesResponse{} }
func (m *GetAccountRolesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountRolesResponse) ProtoMessage()               {}
func (*GetAccountRolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *GetAccountRolesResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountRolesResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountRolesResponse) GetAccountRoles() []*AccountRole {
	if m != nil {
		return m.AccountRoles
	}
	return nil
}

// request parameters for method add_user_to_role
type AddUserToRoleRequest struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *AddUserToRoleRequest) Reset()                    { *m = AddUserToRoleRequest{} }
func (m *AddUserToRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserToRoleRequest) ProtoMessage()               {}
func (*AddUserToRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *AddUserToRoleRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AddUserToRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// response parameters for method add_user_to_role
type AddUserToRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *AddUserToRoleResponse) Reset()                    { *m = AddUserToRoleResponse{} }
func (m *AddUserToRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AddUserToRoleResponse) ProtoMessage()               {}
func (*AddUserToRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *AddUserToRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AddUserToRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method remove_user_from_role
type RemoveUserFromRoleRequest struct {
	// unique identifier for an MService account user
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *RemoveUserFromRoleRequest) Reset()                    { *m = RemoveUserFromRoleRequest{} }
func (m *RemoveUserFromRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserFromRoleRequest) ProtoMessage()               {}
func (*RemoveUserFromRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *RemoveUserFromRoleRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RemoveUserFromRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// response parameters for method remove_user_from_role
type RemoveUserFromRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *RemoveUserFromRoleResponse) Reset()                    { *m = RemoveUserFromRoleResponse{} }
func (m *RemoveUserFromRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveUserFromRoleResponse) ProtoMessage()               {}
func (*RemoveUserFromRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *RemoveUserFromRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *RemoveUserFromRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method add_claim_to_role
type AddClaimToRoleRequest struct {
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,1,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *AddClaimToRoleRequest) Reset()                    { *m = AddClaimToRoleRequest{} }
func (m *AddClaimToRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AddClaimToRoleRequest) ProtoMessage()               {}
func (*AddClaimToRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *AddClaimToRoleRequest) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

func (m *AddClaimToRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// response parameters for method add_claim_to_role
type AddClaimToRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *AddClaimToRoleResponse) Reset()                    { *m = AddClaimToRoleResponse{} }
func (m *AddClaimToRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AddClaimToRoleResponse) ProtoMessage()               {}
func (*AddClaimToRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *AddClaimToRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AddClaimToRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method remove_claim_from_role
type RemoveClaimFromRoleRequest struct {
	// unique identifier for an MService claim value
	ClaimValueId int64 `protobuf:"varint,1,opt,name=claim_value_id,json=claimValueId" json:"claim_value_id,omitempty"`
	// unique identifier for an MService account role
	RoleId int64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (m *RemoveClaimFromRoleRequest) Reset()                    { *m = RemoveClaimFromRoleRequest{} }
func (m *RemoveClaimFromRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveClaimFromRoleRequest) ProtoMessage()               {}
func (*RemoveClaimFromRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *RemoveClaimFromRoleRequest) GetClaimValueId() int64 {
	if m != nil {
		return m.ClaimValueId
	}
	return 0
}

func (m *RemoveClaimFromRoleRequest) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

// response parameters for method remove_claim_from_role
type RemoveClaimFromRoleResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *RemoveClaimFromRoleResponse) Reset()                    { *m = RemoveClaimFromRoleResponse{} }
func (m *RemoveClaimFromRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveClaimFromRoleResponse) ProtoMessage()               {}
func (*RemoveClaimFromRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *RemoveClaimFromRoleResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *RemoveClaimFromRoleResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method get_server_version
type GetServerVersionRequest struct {
	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam" json:"dummy_param,omitempty"`
}

func (m *GetServerVersionRequest) Reset()                    { *m = GetServerVersionRequest{} }
func (m *GetServerVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionRequest) ProtoMessage()               {}
func (*GetServerVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *GetServerVersionRequest) GetDummyParam() int32 {
	if m != nil {
		return m.DummyParam
	}
	return 0
}

// response parameters for method get_server_version
type GetServerVersionResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version level of server
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion" json:"server_version,omitempty"`
	// server uptime in seconds
	ServerUptime int64 `protobuf:"varint,4,opt,name=server_uptime,json=serverUptime" json:"server_uptime,omitempty"`
}

func (m *GetServerVersionResponse) Reset()                    { *m = GetServerVersionResponse{} }
func (m *GetServerVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServerVersionResponse) ProtoMessage()               {}
func (*GetServerVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *GetServerVersionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetServerVersionResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetServerVersionResponse) GetServerVersion() string {
	if m != nil {
		return m.ServerVersion
	}
	return ""
}

func (m *GetServerVersionResponse) GetServerUptime() int64 {
	if m != nil {
		return m.ServerUptime
	}
	return 0
}

func init() {
	proto.RegisterType((*Account)(nil), "org.gaterace.mservice.account.Account")
	proto.RegisterType((*AccountUser)(nil), "org.gaterace.mservice.account.AccountUser")
	proto.RegisterType((*AccountRole)(nil), "org.gaterace.mservice.account.AccountRole")
	proto.RegisterType((*AccountRoleMap)(nil), "org.gaterace.mservice.account.AccountRoleMap")
	proto.RegisterType((*Claim)(nil), "org.gaterace.mservice.account.Claim")
	proto.RegisterType((*ClaimValue)(nil), "org.gaterace.mservice.account.ClaimValue")
	proto.RegisterType((*RoleClaimMap)(nil), "org.gaterace.mservice.account.RoleClaimMap")
	proto.RegisterType((*LoginRequest)(nil), "org.gaterace.mservice.account.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "org.gaterace.mservice.account.LoginResponse")
	proto.RegisterType((*CreateAccountRequest)(nil), "org.gaterace.mservice.account.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "org.gaterace.mservice.account.CreateAccountResponse")
	proto.RegisterType((*UpdateAccountRequest)(nil), "org.gaterace.mservice.account.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "org.gaterace.mservice.account.UpdateAccountResponse")
	proto.RegisterType((*DeleteAccountRequest)(nil), "org.gaterace.mservice.account.DeleteAccountRequest")
	proto.RegisterType((*DeleteAccountResponse)(nil), "org.gaterace.mservice.account.DeleteAccountResponse")
	proto.RegisterType((*GetAccountByIdRequest)(nil), "org.gaterace.mservice.account.GetAccountByIdRequest")
	proto.RegisterType((*GetAccountByIdResponse)(nil), "org.gaterace.mservice.account.GetAccountByIdResponse")
	proto.RegisterType((*GetAccountByNameRequest)(nil), "org.gaterace.mservice.account.GetAccountByNameRequest")
	proto.RegisterType((*GetAccountByNameResponse)(nil), "org.gaterace.mservice.account.GetAccountByNameResponse")
	proto.RegisterType((*GetAccountNamesRequest)(nil), "org.gaterace.mservice.account.GetAccountNamesRequest")
	proto.RegisterType((*GetAccountNamesResponse)(nil), "org.gaterace.mservice.account.GetAccountNamesResponse")
	proto.RegisterType((*CreateAccountUserRequest)(nil), "org.gaterace.mservice.account.CreateAccountUserRequest")
	proto.RegisterType((*CreateAccountUserResponse)(nil), "org.gaterace.mservice.account.CreateAccountUserResponse")
	proto.RegisterType((*UpdateAccountUserRequest)(nil), "org.gaterace.mservice.account.UpdateAccountUserRequest")
	proto.RegisterType((*UpdateAccountUserResponse)(nil), "org.gaterace.mservice.account.UpdateAccountUserResponse")
	proto.RegisterType((*UpdateAccountUserPasswordRequest)(nil), "org.gaterace.mservice.account.UpdateAccountUserPasswordRequest")
	proto.RegisterType((*UpdateAccountUserPasswordResponse)(nil), "org.gaterace.mservice.account.UpdateAccountUserPasswordResponse")
	proto.RegisterType((*DeleteAccountUserRequest)(nil), "org.gaterace.mservice.account.DeleteAccountUserRequest")
	proto.RegisterType((*DeleteAccountUserResponse)(nil), "org.gaterace.mservice.account.DeleteAccountUserResponse")
	proto.RegisterType((*GetAccountUserByIdRequest)(nil), "org.gaterace.mservice.account.GetAccountUserByIdRequest")
	proto.RegisterType((*GetAccountUserByIdResponse)(nil), "org.gaterace.mservice.account.GetAccountUserByIdResponse")
	proto.RegisterType((*GetAccountUserByEmailRequest)(nil), "org.gaterace.mservice.account.GetAccountUserByEmailRequest")
	proto.RegisterType((*GetAccountUserByEmailResponse)(nil), "org.gaterace.mservice.account.GetAccountUserByEmailResponse")
	proto.RegisterType((*GetAccountUsersRequest)(nil), "org.gaterace.mservice.account.GetAccountUsersRequest")
	proto.RegisterType((*GetAccountUsersResponse)(nil), "org.gaterace.mservice.account.GetAccountUsersResponse")
	proto.RegisterType((*CreateClaimNameRequest)(nil), "org.gaterace.mservice.account.CreateClaimNameRequest")
	proto.RegisterType((*CreateClaimNameResponse)(nil), "org.gaterace.mservice.account.CreateClaimNameResponse")
	proto.RegisterType((*UpdateClaimNameRequest)(nil), "org.gaterace.mservice.account.UpdateClaimNameRequest")
	proto.RegisterType((*UpdateClaimNameResponse)(nil), "org.gaterace.mservice.account.UpdateClaimNameResponse")
	proto.RegisterType((*DeleteClaimNameRequest)(nil), "org.gaterace.mservice.account.DeleteClaimNameRequest")
	proto.RegisterType((*DeleteClaimNameResponse)(nil), "org.gaterace.mservice.account.DeleteClaimNameResponse")
	proto.RegisterType((*GetClaimNamesRequest)(nil), "org.gaterace.mservice.account.GetClaimNamesRequest")
	proto.RegisterType((*GetClaimNamesResponse)(nil), "org.gaterace.mservice.account.GetClaimNamesResponse")
	proto.RegisterType((*CreateClaimValueRequest)(nil), "org.gaterace.mservice.account.CreateClaimValueRequest")
	proto.RegisterType((*CreateClaimValueResponse)(nil), "org.gaterace.mservice.account.CreateClaimValueResponse")
	proto.RegisterType((*UpdateClaimValueRequest)(nil), "org.gaterace.mservice.account.UpdateClaimValueRequest")
	proto.RegisterType((*UpdateClaimValueResponse)(nil), "org.gaterace.mservice.account.UpdateClaimValueResponse")
	proto.RegisterType((*DeleteClaimValueRequest)(nil), "org.gaterace.mservice.account.DeleteClaimValueRequest")
	proto.RegisterType((*DeleteClaimValueResponse)(nil), "org.gaterace.mservice.account.DeleteClaimValueResponse")
	proto.RegisterType((*GetClaimValueByIdRequest)(nil), "org.gaterace.mservice.account.GetClaimValueByIdRequest")
	proto.RegisterType((*GetClaimValueByIdResponse)(nil), "org.gaterace.mservice.account.GetClaimValueByIdResponse")
	proto.RegisterType((*GetClaimValuesByNameIdRequest)(nil), "org.gaterace.mservice.account.GetClaimValuesByNameIdRequest")
	proto.RegisterType((*GetClaimValuesByNameIdResponse)(nil), "org.gaterace.mservice.account.GetClaimValuesByNameIdResponse")
	proto.RegisterType((*GetClaimValuesRequest)(nil), "org.gaterace.mservice.account.GetClaimValuesRequest")
	proto.RegisterType((*GetClaimValuesResponse)(nil), "org.gaterace.mservice.account.GetClaimValuesResponse")
	proto.RegisterType((*CreateAccountRoleRequest)(nil), "org.gaterace.mservice.account.CreateAccountRoleRequest")
	proto.RegisterType((*CreateAccountRoleResponse)(nil), "org.gaterace.mservice.account.CreateAccountRoleResponse")
	proto.RegisterType((*UpdateAccountRoleRequest)(nil), "org.gaterace.mservice.account.UpdateAccountRoleRequest")
	proto.RegisterType((*UpdateAccountRoleResponse)(nil), "org.gaterace.mservice.account.UpdateAccountRoleResponse")
	proto.RegisterType((*DeleteAccountRoleRequest)(nil), "org.gaterace.mservice.account.DeleteAccountRoleRequest")
	proto.RegisterType((*DeleteAccountRoleResponse)(nil), "org.gaterace.mservice.account.DeleteAccountRoleResponse")
	proto.RegisterType((*GetAccountRoleByIdRequest)(nil), "org.gaterace.mservice.account.GetAccountRoleByIdRequest")
	proto.RegisterType((*GetAccountRoleByIdResponse)(nil), "org.gaterace.mservice.account.GetAccountRoleByIdResponse")
	proto.RegisterType((*GetAccountRolesRequest)(nil), "org.gaterace.mservice.account.GetAccountRolesRequest")
	proto.RegisterType((*GetAccountRolesResponse)(nil), "org.gaterace.mservice.account.GetAccountRolesResponse")
	proto.RegisterType((*AddUserToRoleRequest)(nil), "org.gaterace.mservice.account.AddUserToRoleRequest")
	proto.RegisterType((*AddUserToRoleResponse)(nil), "org.gaterace.mservice.account.AddUserToRoleResponse")
	proto.RegisterType((*RemoveUserFromRoleRequest)(nil), "org.gaterace.mservice.account.RemoveUserFromRoleRequest")
	proto.RegisterType((*RemoveUserFromRoleResponse)(nil), "org.gaterace.mservice.account.RemoveUserFromRoleResponse")
	proto.RegisterType((*AddClaimToRoleRequest)(nil), "org.gaterace.mservice.account.AddClaimToRoleRequest")
	proto.RegisterType((*AddClaimToRoleResponse)(nil), "org.gaterace.mservice.account.AddClaimToRoleResponse")
	proto.RegisterType((*RemoveClaimFromRoleRequest)(nil), "org.gaterace.mservice.account.RemoveClaimFromRoleRequest")
	proto.RegisterType((*RemoveClaimFromRoleResponse)(nil), "org.gaterace.mservice.account.RemoveClaimFromRoleResponse")
	proto.RegisterType((*GetServerVersionRequest)(nil), "org.gaterace.mservice.account.GetServerVersionRequest")
	proto.RegisterType((*GetServerVersionResponse)(nil), "org.gaterace.mservice.account.GetServerVersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MServiceAccount service

type MServiceAccountClient interface {
	// login as account user and get a json web token
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// create a new account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// update an existing account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// delete an existing account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// get an account by account id
	GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error)
	// get an account by account name
	GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error)
	// get all account names
	GetAccountNames(ctx context.Context, in *GetAccountNamesRequest, opts ...grpc.CallOption) (*GetAccountNamesResponse, error)
	// create an account user
	CreateAccountUser(ctx context.Context, in *CreateAccountUserRequest, opts ...grpc.CallOption) (*CreateAccountUserResponse, error)
	// update an existing account user
	UpdateAccountUser(ctx context.Context, in *UpdateAccountUserRequest, opts ...grpc.CallOption) (*UpdateAccountUserResponse, error)
	// update an existing account user password
	UpdateAccountUserPassword(ctx context.Context, in *UpdateAccountUserPasswordRequest, opts ...grpc.CallOption) (*UpdateAccountUserPasswordResponse, error)
	// delete an existing account user
	DeleteAccountUser(ctx context.Context, in *DeleteAccountUserRequest, opts ...grpc.CallOption) (*DeleteAccountUserResponse, error)
	// get an account user by id
	GetAccountUserById(ctx context.Context, in *GetAccountUserByIdRequest, opts ...grpc.CallOption) (*GetAccountUserByIdResponse, error)
	// get an account user by email
	GetAccountUserByEmail(ctx context.Context, in *GetAccountUserByEmailRequest, opts ...grpc.CallOption) (*GetAccountUserByEmailResponse, error)
	// get all account users in account
	GetAccountUsers(ctx context.Context, in *GetAccountUsersRequest, opts ...grpc.CallOption) (*GetAccountUsersResponse, error)
	// create a claim name
	CreateClaimName(ctx context.Context, in *CreateClaimNameRequest, opts ...grpc.CallOption) (*CreateClaimNameResponse, error)
	// update an existing claim name
	UpdateClaimName(ctx context.Context, in *UpdateClaimNameRequest, opts ...grpc.CallOption) (*UpdateClaimNameResponse, error)
	// delete an existing claim name
	DeleteClaimName(ctx context.Context, in *DeleteClaimNameRequest, opts ...grpc.CallOption) (*DeleteClaimNameResponse, error)
	// get all claim names
	GetClaimNames(ctx context.Context, in *GetClaimNamesRequest, opts ...grpc.CallOption) (*GetClaimNamesResponse, error)
	// create claim value
	CreateClaimValue(ctx context.Context, in *CreateClaimValueRequest, opts ...grpc.CallOption) (*CreateClaimValueResponse, error)
	// update existing claim value
	UpdateClaimValue(ctx context.Context, in *UpdateClaimValueRequest, opts ...grpc.CallOption) (*UpdateClaimValueResponse, error)
	// delete existing claim value
	DeleteClaimValue(ctx context.Context, in *DeleteClaimValueRequest, opts ...grpc.CallOption) (*DeleteClaimValueResponse, error)
	// get claim value by id
	GetClaimValueById(ctx context.Context, in *GetClaimValueByIdRequest, opts ...grpc.CallOption) (*GetClaimValueByIdResponse, error)
	// get all claim values for name id
	GetClaimValuesByNameId(ctx context.Context, in *GetClaimValuesByNameIdRequest, opts ...grpc.CallOption) (*GetClaimValuesByNameIdResponse, error)
	// get all claim values for all claim names
	GetClaimValues(ctx context.Context, in *GetClaimValuesRequest, opts ...grpc.CallOption) (*GetClaimValuesResponse, error)
	// create account role
	CreateAccountRole(ctx context.Context, in *CreateAccountRoleRequest, opts ...grpc.CallOption) (*CreateAccountRoleResponse, error)
	// update existing account role
	UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error)
	// delete existing account role
	DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error)
	// get account role by id
	GetAccountRoleById(ctx context.Context, in *GetAccountRoleByIdRequest, opts ...grpc.CallOption) (*GetAccountRoleByIdResponse, error)
	// get all account roles in account
	GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...grpc.CallOption) (*GetAccountRolesResponse, error)
	// associate an account user with an account role
	AddUserToRole(ctx context.Context, in *AddUserToRoleRequest, opts ...grpc.CallOption) (*AddUserToRoleResponse, error)
	// disassociate an account user from an account role
	RemoveUserFromRole(ctx context.Context, in *RemoveUserFromRoleRequest, opts ...grpc.CallOption) (*RemoveUserFromRoleResponse, error)
	// associate a claim with an account role
	AddClaimToRole(ctx context.Context, in *AddClaimToRoleRequest, opts ...grpc.CallOption) (*AddClaimToRoleResponse, error)
	// remove a claim from an account role
	RemoveClaimFromRole(ctx context.Context, in *RemoveClaimFromRoleRequest, opts ...grpc.CallOption) (*RemoveClaimFromRoleResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
}

type mServiceAccountClient struct {
	cc *grpc.ClientConn
}

func NewMServiceAccountClient(cc *grpc.ClientConn) MServiceAccountClient {
	return &mServiceAccountClient{cc}
}

func (c *mServiceAccountClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error) {
	out := new(GetAccountByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error) {
	out := new(GetAccountByNameResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_by_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountNames(ctx context.Context, in *GetAccountNamesRequest, opts ...grpc.CallOption) (*GetAccountNamesResponse, error) {
	out := new(GetAccountNamesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_names", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateAccountUser(ctx context.Context, in *CreateAccountUserRequest, opts ...grpc.CallOption) (*CreateAccountUserResponse, error) {
	out := new(CreateAccountUserResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_account_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccountUser(ctx context.Context, in *UpdateAccountUserRequest, opts ...grpc.CallOption) (*UpdateAccountUserResponse, error) {
	out := new(UpdateAccountUserResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccountUserPassword(ctx context.Context, in *UpdateAccountUserPasswordRequest, opts ...grpc.CallOption) (*UpdateAccountUserPasswordResponse, error) {
	out := new(UpdateAccountUserPasswordResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account_user_password", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserRequest, opts ...grpc.CallOption) (*DeleteAccountUserResponse, error) {
	out := new(DeleteAccountUserResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_account_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountUserById(ctx context.Context, in *GetAccountUserByIdRequest, opts ...grpc.CallOption) (*GetAccountUserByIdResponse, error) {
	out := new(GetAccountUserByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_user_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountUserByEmail(ctx context.Context, in *GetAccountUserByEmailRequest, opts ...grpc.CallOption) (*GetAccountUserByEmailResponse, error) {
	out := new(GetAccountUserByEmailResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_user_by_email", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountUsers(ctx context.Context, in *GetAccountUsersRequest, opts ...grpc.CallOption) (*GetAccountUsersResponse, error) {
	out := new(GetAccountUsersResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_users", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateClaimName(ctx context.Context, in *CreateClaimNameRequest, opts ...grpc.CallOption) (*CreateClaimNameResponse, error) {
	out := new(CreateClaimNameResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_claim_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateClaimName(ctx context.Context, in *UpdateClaimNameRequest, opts ...grpc.CallOption) (*UpdateClaimNameResponse, error) {
	out := new(UpdateClaimNameResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_claim_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteClaimName(ctx context.Context, in *DeleteClaimNameRequest, opts ...grpc.CallOption) (*DeleteClaimNameResponse, error) {
	out := new(DeleteClaimNameResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_claim_name", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimNames(ctx context.Context, in *GetClaimNamesRequest, opts ...grpc.CallOption) (*GetClaimNamesResponse, error) {
	out := new(GetClaimNamesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_names", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateClaimValue(ctx context.Context, in *CreateClaimValueRequest, opts ...grpc.CallOption) (*CreateClaimValueResponse, error) {
	out := new(CreateClaimValueResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_claim_value", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateClaimValue(ctx context.Context, in *UpdateClaimValueRequest, opts ...grpc.CallOption) (*UpdateClaimValueResponse, error) {
	out := new(UpdateClaimValueResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_claim_value", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteClaimValue(ctx context.Context, in *DeleteClaimValueRequest, opts ...grpc.CallOption) (*DeleteClaimValueResponse, error) {
	out := new(DeleteClaimValueResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_claim_value", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimValueById(ctx context.Context, in *GetClaimValueByIdRequest, opts ...grpc.CallOption) (*GetClaimValueByIdResponse, error) {
	out := new(GetClaimValueByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_value_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimValuesByNameId(ctx context.Context, in *GetClaimValuesByNameIdRequest, opts ...grpc.CallOption) (*GetClaimValuesByNameIdResponse, error) {
	out := new(GetClaimValuesByNameIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_values_by_name_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimValues(ctx context.Context, in *GetClaimValuesRequest, opts ...grpc.CallOption) (*GetClaimValuesResponse, error) {
	out := new(GetClaimValuesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_values", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateAccountRole(ctx context.Context, in *CreateAccountRoleRequest, opts ...grpc.CallOption) (*CreateAccountRoleResponse, error) {
	out := new(CreateAccountRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_account_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error) {
	out := new(UpdateAccountRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error) {
	out := new(DeleteAccountRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_account_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountRoleById(ctx context.Context, in *GetAccountRoleByIdRequest, opts ...grpc.CallOption) (*GetAccountRoleByIdResponse, error) {
	out := new(GetAccountRoleByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_role_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...grpc.CallOption) (*GetAccountRolesResponse, error) {
	out := new(GetAccountRolesResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_roles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) AddUserToRole(ctx context.Context, in *AddUserToRoleRequest, opts ...grpc.CallOption) (*AddUserToRoleResponse, error) {
	out := new(AddUserToRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/add_user_to_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) RemoveUserFromRole(ctx context.Context, in *RemoveUserFromRoleRequest, opts ...grpc.CallOption) (*RemoveUserFromRoleResponse, error) {
	out := new(RemoveUserFromRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/remove_user_from_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) AddClaimToRole(ctx context.Context, in *AddClaimToRoleRequest, opts ...grpc.CallOption) (*AddClaimToRoleResponse, error) {
	out := new(AddClaimToRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/add_claim_to_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) RemoveClaimFromRole(ctx context.Context, in *RemoveClaimFromRoleRequest, opts ...grpc.CallOption) (*RemoveClaimFromRoleResponse, error) {
	out := new(RemoveClaimFromRoleResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/remove_claim_from_role", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_server_version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MServiceAccount service

type MServiceAccountServer interface {
	// login as account user and get a json web token
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// create a new account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// update an existing account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// delete an existing account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// get an account by account id
	GetAccountById(context.Context, *GetAccountByIdRequest) (*GetAccountByIdResponse, error)
	// get an account by account name
	GetAccountByName(context.Context, *GetAccountByNameRequest) (*GetAccountByNameResponse, error)
	// get all account names
	GetAccountNames(context.Context, *GetAccountNamesRequest) (*GetAccountNamesResponse, error)
	// create an account user
	CreateAccountUser(context.Context, *CreateAccountUserRequest) (*CreateAccountUserResponse, error)
	// update an existing account user
	UpdateAccountUser(context.Context, *UpdateAccountUserRequest) (*UpdateAccountUserResponse, error)
	// update an existing account user password
	UpdateAccountUserPassword(context.Context, *UpdateAccountUserPasswordRequest) (*UpdateAccountUserPasswordResponse, error)
	// delete an existing account user
	DeleteAccountUser(context.Context, *DeleteAccountUserRequest) (*DeleteAccountUserResponse, error)
	// get an account user by id
	GetAccountUserById(context.Context, *GetAccountUserByIdRequest) (*GetAccountUserByIdResponse, error)
	// get an account user by email
	GetAccountUserByEmail(context.Context, *GetAccountUserByEmailRequest) (*GetAccountUserByEmailResponse, error)
	// get all account users in account
	GetAccountUsers(context.Context, *GetAccountUsersRequest) (*GetAccountUsersResponse, error)
	// create a claim name
	CreateClaimName(context.Context, *CreateClaimNameRequest) (*CreateClaimNameResponse, error)
	// update an existing claim name
	UpdateClaimName(context.Context, *UpdateClaimNameRequest) (*UpdateClaimNameResponse, error)
	// delete an existing claim name
	DeleteClaimName(context.Context, *DeleteClaimNameRequest) (*DeleteClaimNameResponse, error)
	// get all claim names
	GetClaimNames(context.Context, *GetClaimNamesRequest) (*GetClaimNamesResponse, error)
	// create claim value
	CreateClaimValue(context.Context, *CreateClaimValueRequest) (*CreateClaimValueResponse, error)
	// update existing claim value
	UpdateClaimValue(context.Context, *UpdateClaimValueRequest) (*UpdateClaimValueResponse, error)
	// delete existing claim value
	DeleteClaimValue(context.Context, *DeleteClaimValueRequest) (*DeleteClaimValueResponse, error)
	// get claim value by id
	GetClaimValueById(context.Context, *GetClaimValueByIdRequest) (*GetClaimValueByIdResponse, error)
	// get all claim values for name id
	GetClaimValuesByNameId(context.Context, *GetClaimValuesByNameIdRequest) (*GetClaimValuesByNameIdResponse, error)
	// get all claim values for all claim names
	GetClaimValues(context.Context, *GetClaimValuesRequest) (*GetClaimValuesResponse, error)
	// create account role
	CreateAccountRole(context.Context, *CreateAccountRoleRequest) (*CreateAccountRoleResponse, error)
	// update existing account role
	UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error)
	// delete existing account role
	DeleteAccountRole(context.Context, *DeleteAccountRoleRequest) (*DeleteAccountRoleResponse, error)
	// get account role by id
	GetAccountRoleById(context.Context, *GetAccountRoleByIdRequest) (*GetAccountRoleByIdResponse, error)
	// get all account roles in account
	GetAccountRoles(context.Context, *GetAccountRolesRequest) (*GetAccountRolesResponse, error)
	// associate an account user with an account role
	AddUserToRole(context.Context, *AddUserToRoleRequest) (*AddUserToRoleResponse, error)
	// disassociate an account user from an account role
	RemoveUserFromRole(context.Context, *RemoveUserFromRoleRequest) (*RemoveUserFromRoleResponse, error)
	// associate a claim with an account role
	AddClaimToRole(context.Context, *AddClaimToRoleRequest) (*AddClaimToRoleResponse, error)
	// remove a claim from an account role
	RemoveClaimFromRole(context.Context, *RemoveClaimFromRoleRequest) (*RemoveClaimFromRoleResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
}

func RegisterMServiceAccountServer(s *grpc.Server, srv MServiceAccountServer) {
	s.RegisterService(&_MServiceAccount_serviceDesc, srv)
}

func _MServiceAccount_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountById(ctx, req.(*GetAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountByName(ctx, req.(*GetAccountByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountNames(ctx, req.(*GetAccountNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/CreateAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateAccountUser(ctx, req.(*CreateAccountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/UpdateAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccountUser(ctx, req.(*UpdateAccountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccountUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccountUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/UpdateAccountUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccountUserPassword(ctx, req.(*UpdateAccountUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/DeleteAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteAccountUser(ctx, req.(*DeleteAccountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountUserById(ctx, req.(*GetAccountUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountUserByEmail(ctx, req.(*GetAccountUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountUsers(ctx, req.(*GetAccountUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateClaimName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClaimNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateClaimName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/CreateClaimName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateClaimName(ctx, req.(*CreateClaimNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateClaimName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClaimNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateClaimName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/UpdateClaimName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateClaimName(ctx, req.(*UpdateClaimNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteClaimName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClaimNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteClaimName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/DeleteClaimName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteClaimName(ctx, req.(*DeleteClaimNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetClaimNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimNames(ctx, req.(*GetClaimNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateClaimValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClaimValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateClaimValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/CreateClaimValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateClaimValue(ctx, req.(*CreateClaimValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateClaimValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClaimValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateClaimValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/UpdateClaimValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateClaimValue(ctx, req.(*UpdateClaimValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteClaimValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClaimValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteClaimValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/DeleteClaimValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteClaimValue(ctx, req.(*DeleteClaimValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimValueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimValueByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimValueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetClaimValueById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimValueById(ctx, req.(*GetClaimValueByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimValuesByNameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimValuesByNameIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimValuesByNameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetClaimValuesByNameId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimValuesByNameId(ctx, req.(*GetClaimValuesByNameIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetClaimValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimValues(ctx, req.(*GetClaimValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/CreateAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateAccountRole(ctx, req.(*CreateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/UpdateAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccountRole(ctx, req.(*UpdateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/DeleteAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteAccountRole(ctx, req.(*DeleteAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRoleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountRoleById(ctx, req.(*GetAccountRoleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetAccountRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountRoles(ctx, req.(*GetAccountRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_AddUserToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).AddUserToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/AddUserToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).AddUserToRole(ctx, req.(*AddUserToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_RemoveUserFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).RemoveUserFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/RemoveUserFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).RemoveUserFromRole(ctx, req.(*RemoveUserFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_AddClaimToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClaimToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).AddClaimToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/AddClaimToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).AddClaimToRole(ctx, req.(*AddClaimToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_RemoveClaimFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClaimFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).RemoveClaimFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/RemoveClaimFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).RemoveClaimFromRole(ctx, req.(*RemoveClaimFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/GetServerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MServiceAccount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.account.MServiceAccount",
	HandlerType: (*MServiceAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _MServiceAccount_Login_Handler,
		},
		{
			MethodName: "create_account",
			Handler:    _MServiceAccount_CreateAccount_Handler,
		},
		{
			MethodName: "update_account",
			Handler:    _MServiceAccount_UpdateAccount_Handler,
		},
		{
			MethodName: "delete_account",
			Handler:    _MServiceAccount_DeleteAccount_Handler,
		},
		{
			MethodName: "get_account_by_id",
			Handler:    _MServiceAccount_GetAccountById_Handler,
		},
		{
			MethodName: "get_account_by_name",
			Handler:    _MServiceAccount_GetAccountByName_Handler,
		},
		{
			MethodName: "get_account_names",
			Handler:    _MServiceAccount_GetAccountNames_Handler,
		},
		{
			MethodName: "create_account_user",
			Handler:    _MServiceAccount_CreateAccountUser_Handler,
		},
		{
			MethodName: "update_account_user",
			Handler:    _MServiceAccount_UpdateAccountUser_Handler,
		},
		{
			MethodName: "update_account_user_password",
			Handler:    _MServiceAccount_UpdateAccountUserPassword_Handler,
		},
		{
			MethodName: "delete_account_user",
			Handler:    _MServiceAccount_DeleteAccountUser_Handler,
		},
		{
			MethodName: "get_account_user_by_id",
			Handler:    _MServiceAccount_GetAccountUserById_Handler,
		},
		{
			MethodName: "get_account_user_by_email",
			Handler:    _MServiceAccount_GetAccountUserByEmail_Handler,
		},
		{
			MethodName: "get_account_users",
			Handler:    _MServiceAccount_GetAccountUsers_Handler,
		},
		{
			MethodName: "create_claim_name",
			Handler:    _MServiceAccount_CreateClaimName_Handler,
		},
		{
			MethodName: "update_claim_name",
			Handler:    _MServiceAccount_UpdateClaimName_Handler,
		},
		{
			MethodName: "delete_claim_name",
			Handler:    _MServiceAccount_DeleteClaimName_Handler,
		},
		{
			MethodName: "get_claim_names",
			Handler:    _MServiceAccount_GetClaimNames_Handler,
		},
		{
			MethodName: "create_claim_value",
			Handler:    _MServiceAccount_CreateClaimValue_Handler,
		},
		{
			MethodName: "update_claim_value",
			Handler:    _MServiceAccount_UpdateClaimValue_Handler,
		},
		{
			MethodName: "delete_claim_value",
			Handler:    _MServiceAccount_DeleteClaimValue_Handler,
		},
		{
			MethodName: "get_claim_value_by_id",
			Handler:    _MServiceAccount_GetClaimValueById_Handler,
		},
		{
			MethodName: "get_claim_values_by_name_id",
			Handler:    _MServiceAccount_GetClaimValuesByNameId_Handler,
		},
		{
			MethodName: "get_claim_values",
			Handler:    _MServiceAccount_GetClaimValues_Handler,
		},
		{
			MethodName: "create_account_role",
			Handler:    _MServiceAccount_CreateAccountRole_Handler,
		},
		{
			MethodName: "update_account_role",
			Handler:    _MServiceAccount_UpdateAccountRole_Handler,
		},
		{
			MethodName: "delete_account_role",
			Handler:    _MServiceAccount_DeleteAccountRole_Handler,
		},
		{
			MethodName: "get_account_role_by_id",
			Handler:    _MServiceAccount_GetAccountRoleById_Handler,
		},
		{
			MethodName: "get_account_roles",
			Handler:    _MServiceAccount_GetAccountRoles_Handler,
		},
		{
			MethodName: "add_user_to_role",
			Handler:    _MServiceAccount_AddUserToRole_Handler,
		},
		{
			MethodName: "remove_user_from_role",
			Handler:    _MServiceAccount_RemoveUserFromRole_Handler,
		},
		{
			MethodName: "add_claim_to_role",
			Handler:    _MServiceAccount_AddClaimToRole_Handler,
		},
		{
			MethodName: "remove_claim_from_role",
			Handler:    _MServiceAccount_RemoveClaimFromRole_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceAccount_GetServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceAccount.proto",
}

func init() { proto.RegisterFile("MServiceAccount.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5b, 0xed, 0x6f, 0x1c, 0x47,
	0x19, 0xd7, 0xdc, 0xde, 0xf9, 0xee, 0x9e, 0x3b, 0x3b, 0xce, 0xd6, 0x2f, 0xeb, 0x75, 0x43, 0x9d,
	0x6d, 0x00, 0xb7, 0x45, 0x96, 0x70, 0x43, 0x9c, 0xa6, 0x41, 0xa4, 0x75, 0xd2, 0x52, 0x14, 0x93,
	0xea, 0x9a, 0x18, 0x41, 0x91, 0x8e, 0xcd, 0xed, 0xc4, 0x5c, 0x75, 0x77, 0x7b, 0xec, 0xee, 0x39,
	0xb5, 0x0a, 0xa2, 0x20, 0x81, 0x10, 0x02, 0x21, 0x01, 0x42, 0x82, 0x0a, 0x44, 0xfb, 0x01, 0xa1,
	0x22, 0x5e, 0x04, 0xe2, 0x2b, 0x9f, 0xf9, 0x1b, 0xf8, 0x03, 0xf8, 0x3b, 0xd0, 0xbc, 0xec, 0xed,
	0xec, 0xfb, 0x8c, 0x7d, 0x39, 0x25, 0x7c, 0xf3, 0xcd, 0xcc, 0xf3, 0xcc, 0xef, 0x79, 0xe6, 0x99,
	0x67, 0x9e, 0x97, 0x35, 0xac, 0x1e, 0xbc, 0x85, 0xbd, 0xe3, 0x7e, 0x0f, 0xbf, 0xd2, 0xeb, 0xb9,
	0x93, 0x51, 0xb0, 0x33, 0xf6, 0xdc, 0xc0, 0xd5, 0x2f, 0xb8, 0xde, 0xd1, 0xce, 0x91, 0x1d, 0x60,
	0xcf, 0xee, 0xe1, 0x9d, 0xa1, 0xcf, 0xd6, 0xec, 0xd8, 0x6c, 0x91, 0xa9, 0xdf, 0x1c, 0x0e, 0x6e,
	0xbd, 0x1b, 0xe0, 0x91, 0xdf, 0x77, 0x47, 0x8c, 0xc4, 0xfa, 0xa8, 0x0a, 0x75, 0xce, 0x44, 0xbf,
	0x00, 0xc0, 0x97, 0x76, 0xfb, 0x8e, 0x81, 0xb6, 0xd0, 0xb6, 0xd6, 0x69, 0xf2, 0x91, 0x37, 0x1c,
	0xfd, 0xd3, 0x50, 0xef, 0x79, 0xd8, 0x0e, 0xb0, 0x63, 0x54, 0xb6, 0xd0, 0x76, 0x6b, 0x77, 0x71,
	0xc7, 0x19, 0x0e, 0x76, 0x6e, 0xda, 0x01, 0xbe, 0xdb, 0x1f, 0xe2, 0x4e, 0x38, 0xab, 0x3f, 0x07,
	0x8d, 0xa1, 0xeb, 0xf4, 0x1f, 0xf4, 0xb1, 0x63, 0x68, 0x59, 0x2b, 0xa7, 0xd3, 0x84, 0xa7, 0x83,
	0x07, 0x98, 0xf0, 0xac, 0x66, 0xf2, 0xe4, 0xb3, 0x04, 0x5b, 0xdf, 0xef, 0x86, 0x6b, 0x6b, 0x5b,
	0x68, 0xbb, 0xd1, 0x69, 0xf6, 0xfd, 0x9b, 0x7c, 0xda, 0x80, 0xfa, 0x31, 0xf6, 0x88, 0x5c, 0xc6,
	0xc2, 0x16, 0xda, 0xae, 0x75, 0xc2, 0x9f, 0xfa, 0x45, 0x68, 0x87, 0x42, 0x8d, 0xec, 0x21, 0x36,
	0xea, 0x5b, 0x68, 0xbb, 0xd9, 0x69, 0xf1, 0xb1, 0x2f, 0xdb, 0x43, 0xac, 0x3f, 0x0f, 0xe7, 0xc3,
	0x25, 0x03, 0x77, 0x74, 0xc4, 0xd6, 0x35, 0xe8, 0xba, 0x73, 0x7c, 0xe2, 0xb6, 0x3b, 0x3a, 0xa2,
	0x6b, 0x05, 0x76, 0xc1, 0xc9, 0x18, 0x1b, 0x4d, 0xba, 0x5b, 0xc8, 0xee, 0xee, 0xc9, 0x18, 0xeb,
	0x26, 0x34, 0x6c, 0xc7, 0xf1, 0xb0, 0xef, 0x7f, 0xd6, 0x00, 0xca, 0x65, 0xfa, 0x5b, 0x98, 0xdb,
	0x35, 0x5a, 0xb1, 0xb9, 0x5d, 0x5d, 0x87, 0x6a, 0xaf, 0x1f, 0x9c, 0x18, 0x6d, 0x3a, 0x4e, 0xff,
	0xd6, 0x57, 0xa0, 0xe6, 0x07, 0x76, 0x80, 0x8d, 0x45, 0x3a, 0xc8, 0x7e, 0xe8, 0xcf, 0x40, 0x6b,
	0xec, 0xfa, 0x81, 0x3d, 0xe8, 0xf6, 0x5c, 0x07, 0x1b, 0x4b, 0x74, 0x0e, 0xd8, 0xd0, 0xbe, 0xeb,
	0x50, 0x94, 0x14, 0x8f, 0x77, 0xc2, 0x56, 0x9c, 0x63, 0x42, 0xf3, 0x31, 0xba, 0x64, 0x05, 0x6a,
	0xe3, 0x6f, 0xba, 0x23, 0x6c, 0x2c, 0x33, 0xce, 0xf4, 0x07, 0x19, 0xc5, 0x43, 0xbb, 0x3f, 0x30,
	0xce, 0xb3, 0x51, 0xfa, 0xc3, 0xfa, 0xb7, 0x06, 0x2d, 0x6e, 0x24, 0xf7, 0x7c, 0xec, 0xe9, 0xeb,
	0x50, 0x9f, 0xf8, 0xd8, 0x8b, 0xac, 0x64, 0x81, 0xfc, 0x7c, 0x62, 0x4d, 0x24, 0x6e, 0xf7, 0xf5,
	0xa4, 0xdd, 0x4f, 0x75, 0xd2, 0x10, 0x74, 0xa2, 0x5f, 0x82, 0x25, 0xaa, 0x83, 0x07, 0x93, 0xc1,
	0x80, 0x59, 0x4c, 0x93, 0x4e, 0xb7, 0xc9, 0xe8, 0x6b, 0x93, 0xc1, 0x80, 0x9a, 0xcb, 0x26, 0x34,
	0xe9, 0x2a, 0x6a, 0x2b, 0x40, 0xb7, 0x6d, 0x90, 0x01, 0x6a, 0x28, 0x17, 0xa1, 0x3d, 0xb6, 0x7d,
	0xff, 0xa1, 0xeb, 0x39, 0x5d, 0x3c, 0xea, 0x71, 0x83, 0x68, 0x85, 0x63, 0xb7, 0x46, 0x3d, 0xfd,
	0x0e, 0x2c, 0x86, 0xd0, 0x3c, 0x77, 0x80, 0x7d, 0xa3, 0xbd, 0xa5, 0x6d, 0xb7, 0x76, 0x9f, 0xdf,
	0x29, 0xbc, 0xe9, 0x3b, 0xfc, 0xb0, 0x3a, 0xee, 0x00, 0x77, 0x42, 0x7b, 0x25, 0x3f, 0x7c, 0xeb,
	0xbf, 0x95, 0xe9, 0x51, 0x92, 0x01, 0x72, 0x94, 0x84, 0xb1, 0x70, 0x94, 0xe4, 0xe7, 0xff, 0xeb,
	0x51, 0x6e, 0x42, 0x93, 0x4a, 0x2b, 0xdc, 0xf0, 0x06, 0x19, 0xa0, 0x67, 0x75, 0x1b, 0xda, 0xbd,
	0x81, 0xdd, 0x1f, 0x76, 0x8f, 0xed, 0xc1, 0x04, 0xfb, 0x46, 0x93, 0xaa, 0xfa, 0xb9, 0x12, 0x55,
	0xef, 0x13, 0x92, 0x43, 0x42, 0xd1, 0x69, 0xf5, 0xa6, 0x7f, 0xfb, 0xd6, 0x3f, 0x10, 0x2c, 0x09,
	0x8a, 0x3e, 0xb0, 0xc7, 0xf9, 0xd7, 0x46, 0x38, 0x84, 0x4a, 0xde, 0x21, 0x68, 0x85, 0x87, 0x30,
	0x23, 0xcd, 0x5a, 0x7f, 0xae, 0x40, 0x8d, 0x4a, 0xa4, 0x5b, 0xb0, 0xc8, 0xb4, 0x41, 0x74, 0x15,
	0x41, 0x66, 0x32, 0x12, 0x7d, 0x3d, 0xc9, 0x36, 0x12, 0x49, 0xc6, 0xdf, 0x83, 0xe6, 0x54, 0x2c,
	0xfd, 0x05, 0x38, 0xcf, 0xa6, 0x1d, 0xec, 0xf7, 0xbc, 0xfe, 0x38, 0x20, 0x2c, 0x98, 0xad, 0x2c,
	0xd3, 0x89, 0x9b, 0xd1, 0xb8, 0xf5, 0x5b, 0x0d, 0x20, 0xb2, 0x00, 0xe2, 0x14, 0x04, 0x13, 0x8a,
	0xb4, 0xd6, 0x8e, 0x2c, 0xe3, 0x89, 0x55, 0x5b, 0xca, 0x20, 0xea, 0x69, 0x83, 0xd8, 0x84, 0xe6,
	0x54, 0xfe, 0xf0, 0x7e, 0x85, 0xa2, 0xeb, 0x57, 0x60, 0x5d, 0x54, 0x8e, 0xa8, 0x5e, 0xe6, 0x3a,
	0x57, 0x23, 0x2d, 0x09, 0x3a, 0xd6, 0xaf, 0x41, 0x8d, 0x4e, 0x50, 0xff, 0xd9, 0xda, 0xbd, 0x24,
	0x73, 0x21, 0x3b, 0x8c, 0xc4, 0xfa, 0x17, 0x82, 0x36, 0xb9, 0x7e, 0x74, 0x90, 0xdf, 0xc1, 0x6c,
	0x7f, 0x97, 0x3e, 0xba, 0x4a, 0xf1, 0xd1, 0xcd, 0xe7, 0x42, 0xf6, 0xa0, 0x7d, 0xdb, 0x3d, 0xea,
	0x8f, 0x3a, 0xf8, 0x5b, 0x13, 0xec, 0x07, 0xa9, 0x70, 0x06, 0xa5, 0xc3, 0x99, 0xe9, 0x7b, 0x55,
	0x11, 0xdf, 0x2b, 0x13, 0x1a, 0xe1, 0xc3, 0x42, 0xa1, 0x37, 0x3b, 0xd3, 0xdf, 0x16, 0x86, 0x45,
	0xbe, 0x89, 0x3f, 0x76, 0x47, 0x3e, 0x26, 0xa0, 0xb0, 0xe7, 0xb9, 0x1e, 0x8b, 0x1e, 0x10, 0x35,
	0x84, 0x26, 0x1d, 0xa1, 0xb1, 0xc3, 0xb3, 0xb0, 0xc8, 0xa6, 0x87, 0xd8, 0xf7, 0xed, 0x23, 0xcc,
	0x77, 0x6a, 0xd3, 0xc1, 0x03, 0x36, 0xa6, 0x2f, 0x83, 0xf6, 0xce, 0xc3, 0x80, 0xef, 0x45, 0xfe,
	0xb4, 0xfe, 0x53, 0x81, 0x95, 0x7d, 0xaa, 0x9f, 0xd0, 0x31, 0xca, 0x0b, 0x95, 0x19, 0xa3, 0x55,
	0xe4, 0x62, 0x34, 0xad, 0x38, 0x46, 0xab, 0x16, 0xc4, 0x68, 0xb5, 0x9c, 0x18, 0x6d, 0x21, 0x2b,
	0x46, 0xab, 0x17, 0xc4, 0x68, 0x8d, 0xd2, 0x18, 0xad, 0x59, 0x10, 0xa3, 0x41, 0x66, 0x8c, 0xd6,
	0x12, 0x63, 0xb4, 0x5f, 0x22, 0x58, 0x4d, 0x28, 0x77, 0x86, 0x87, 0x29, 0xb8, 0x05, 0xad, 0xe8,
	0xc5, 0xad, 0x26, 0x5e, 0x5c, 0xeb, 0x17, 0x1a, 0xac, 0xdc, 0x1b, 0x3b, 0xe9, 0x33, 0x2f, 0x49,
	0x36, 0x84, 0x0d, 0x2b, 0xc5, 0x01, 0xbd, 0x26, 0x69, 0x2c, 0x55, 0x39, 0x63, 0xa9, 0x15, 0x1b,
	0xcb, 0x42, 0x81, 0xb1, 0xd4, 0x73, 0x8c, 0xa5, 0x91, 0x65, 0x2c, 0xcd, 0x02, 0x63, 0x81, 0x52,
	0x63, 0x69, 0x15, 0x18, 0x4b, 0x3b, 0xd3, 0x58, 0x16, 0x45, 0x63, 0x99, 0xc0, 0x6a, 0xe2, 0x50,
	0xe6, 0x61, 0x2b, 0xd6, 0x1d, 0x58, 0x61, 0x7e, 0x6d, 0x46, 0xb6, 0x40, 0xe4, 0x48, 0x30, 0x9c,
	0x8b, 0x1c, 0x57, 0x60, 0xf5, 0x75, 0x1c, 0xf0, 0x3d, 0x5f, 0x3d, 0x79, 0xc3, 0x91, 0x13, 0xc4,
	0xfa, 0x1d, 0x82, 0xb5, 0x24, 0xe1, 0x0c, 0x01, 0xdf, 0x80, 0x3a, 0xdf, 0x8b, 0x3f, 0x4e, 0x9f,
	0x92, 0x4c, 0x13, 0x42, 0x32, 0xeb, 0x3a, 0xac, 0x8b, 0xf8, 0xc8, 0x05, 0x91, 0xf7, 0xd1, 0xd6,
	0xef, 0x11, 0x18, 0x69, 0xf2, 0xc7, 0x4a, 0xc0, 0x97, 0xc4, 0x03, 0x20, 0xf8, 0xfc, 0x50, 0xbe,
	0x67, 0xa0, 0xe5, 0x4c, 0x86, 0xc3, 0x93, 0xee, 0xd8, 0xf6, 0xec, 0x21, 0x07, 0x08, 0x74, 0xe8,
	0x4d, 0x32, 0x62, 0xbd, 0x8f, 0x44, 0xe5, 0x70, 0xda, 0x19, 0x0a, 0x97, 0xf6, 0x6b, 0x5a, 0x52,
	0xc1, 0xff, 0x44, 0x60, 0xc4, 0x7c, 0x3c, 0xc9, 0xc6, 0x25, 0x2f, 0x51, 0x76, 0x54, 0x90, 0xce,
	0x62, 0xb5, 0xb2, 0x2c, 0xb6, 0x5a, 0x92, 0xc5, 0xd6, 0x52, 0x59, 0xac, 0xf5, 0x73, 0x04, 0x1b,
	0x19, 0xb8, 0xe7, 0xf2, 0x3e, 0x09, 0x49, 0x57, 0x55, 0x4c, 0xba, 0xac, 0x3f, 0x20, 0x30, 0x62,
	0x4e, 0x50, 0x54, 0x66, 0x6e, 0xaa, 0x96, 0xff, 0x2e, 0x4d, 0x15, 0xac, 0x15, 0x2b, 0xb8, 0x5a,
	0xa6, 0xe0, 0x5a, 0x5c, 0xc1, 0xd6, 0x09, 0x6c, 0x64, 0xe0, 0x9c, 0x8b, 0xa3, 0xfb, 0x00, 0xc1,
	0x56, 0x6a, 0xef, 0x37, 0xf9, 0xc9, 0x9e, 0x41, 0x57, 0xa2, 0xcd, 0xb8, 0x83, 0x30, 0x20, 0x9d,
	0xda, 0xcc, 0x9d, 0x81, 0x93, 0x32, 0xab, 0x6a, 0xda, 0xac, 0xbe, 0x87, 0xe0, 0x62, 0x01, 0xba,
	0xb9, 0x68, 0xe8, 0x00, 0x8c, 0xd8, 0x0b, 0x74, 0x36, 0x23, 0x22, 0x67, 0x9d, 0xc1, 0x6e, 0x2e,
	0x92, 0x5c, 0x86, 0x8d, 0xc8, 0xbd, 0x91, 0x7d, 0xc5, 0x87, 0x2d, 0x4f, 0x14, 0xeb, 0xaf, 0x08,
	0xcc, 0x2c, 0xb2, 0x19, 0x42, 0x3e, 0x88, 0x1c, 0x23, 0xd9, 0x94, 0xbb, 0x7e, 0xc9, 0x12, 0x18,
	0x55, 0x60, 0xe8, 0x44, 0xc9, 0x0f, 0xeb, 0x2b, 0xf0, 0x74, 0x12, 0xf0, 0x2d, 0x72, 0x55, 0xcf,
	0x9a, 0x61, 0x59, 0x7f, 0x47, 0x70, 0x21, 0x87, 0xf3, 0xe3, 0xab, 0x8d, 0x97, 0xc5, 0x07, 0x91,
	0x8c, 0xf8, 0x0a, 0x0f, 0xfe, 0x5f, 0x62, 0x4f, 0x22, 0xa7, 0x9e, 0xa1, 0xac, 0x42, 0xf5, 0x93,
	0xc8, 0xea, 0xd3, 0x37, 0x51, 0x4d, 0xd8, 0xb6, 0x20, 0xac, 0x6f, 0x39, 0xb0, 0xc6, 0xde, 0xa1,
	0xfd, 0xb0, 0x68, 0x21, 0xbc, 0x9e, 0x42, 0x51, 0x08, 0x49, 0x15, 0x85, 0x2a, 0x39, 0x45, 0xa1,
	0x0f, 0x10, 0xac, 0xa7, 0xb6, 0x99, 0xcb, 0x63, 0x97, 0xaa, 0xd1, 0x54, 0x53, 0x35, 0x1a, 0xeb,
	0x23, 0x04, 0x6b, 0xcc, 0x6b, 0xa6, 0x94, 0x20, 0x53, 0xf3, 0xcb, 0x77, 0xea, 0x71, 0x15, 0x6a,
	0x52, 0x2a, 0xac, 0xe6, 0xa8, 0xf0, 0x21, 0xac, 0xa7, 0x30, 0xce, 0xc5, 0x0b, 0x1e, 0xc2, 0x1a,
	0x73, 0xc0, 0xb3, 0x55, 0x0e, 0x11, 0x28, 0xc5, 0x77, 0x2e, 0x02, 0xed, 0xc1, 0xca, 0xeb, 0x38,
	0x98, 0xee, 0x2a, 0x1f, 0xef, 0xfe, 0x1a, 0xd1, 0x2c, 0x47, 0xa4, 0x9c, 0x21, 0xe0, 0xeb, 0xb0,
	0x40, 0x15, 0x17, 0xde, 0x69, 0xb9, 0xaa, 0x1e, 0xa7, 0x21, 0x01, 0xa5, 0x78, 0xc3, 0x58, 0xf9,
	0x5d, 0xe1, 0x9c, 0x62, 0x75, 0xca, 0x8a, 0x7c, 0x9d, 0x52, 0x2b, 0xa8, 0x53, 0x92, 0xec, 0xce,
	0x48, 0x83, 0x9a, 0xcb, 0xbd, 0x4f, 0x17, 0x2f, 0xab, 0xe9, 0xe2, 0x25, 0x75, 0xd7, 0xc2, 0xad,
	0x8a, 0x69, 0x4d, 0xae, 0x72, 0x9d, 0x7f, 0xf9, 0x63, 0x1a, 0xd5, 0xe4, 0x35, 0x5a, 0x2d, 0xd2,
	0xe8, 0xbb, 0x61, 0x84, 0x3e, 0x6f, 0x85, 0x5a, 0x5f, 0x8d, 0x5d, 0xd7, 0x59, 0x6a, 0x8a, 0x08,
	0x95, 0x66, 0x3d, 0x17, 0xa1, 0x6e, 0xd0, 0xf4, 0x3c, 0xda, 0x56, 0x0c, 0xf0, 0xa4, 0xa4, 0xb2,
	0xfe, 0x84, 0x68, 0x90, 0x98, 0x64, 0x31, 0x43, 0xf4, 0x5f, 0x82, 0x96, 0x80, 0x83, 0x47, 0x37,
	0x0a, 0x3d, 0x38, 0x88, 0xf0, 0x5a, 0xfb, 0x34, 0x1e, 0x8b, 0x26, 0x7d, 0x56, 0x92, 0x88, 0x84,
	0x96, 0x70, 0x15, 0xd6, 0xdf, 0x10, 0x7c, 0x22, 0x8f, 0xcb, 0xa3, 0x94, 0x5b, 0x3b, 0xbd, 0xdc,
	0x57, 0x23, 0xc7, 0xcd, 0x10, 0x4b, 0xfb, 0xfc, 0x3f, 0xb2, 0x02, 0x55, 0x8c, 0xf4, 0x31, 0x15,
	0xf2, 0x30, 0x51, 0x0a, 0xa1, 0xbd, 0x6e, 0xb9, 0x52, 0x48, 0xac, 0x0b, 0x5c, 0x89, 0x77, 0x81,
	0xd3, 0xb5, 0x0a, 0xc6, 0x78, 0x5e, 0xb5, 0x8a, 0xb0, 0x39, 0x55, 0x15, 0x9b, 0x53, 0xd6, 0x3b,
	0x89, 0x52, 0x85, 0x28, 0x6c, 0x6e, 0x47, 0xab, 0xd0, 0x59, 0x47, 0x0a, 0xd0, 0x12, 0x0a, 0x48,
	0x96, 0x1b, 0xe6, 0x27, 0x7f, 0x2a, 0x99, 0x3e, 0x9b, 0x98, 0xa9, 0x64, 0x7a, 0x8e, 0x92, 0xc4,
	0x92, 0x69, 0xb2, 0x6f, 0x22, 0x99, 0xce, 0x14, 0x25, 0x91, 0x4c, 0x47, 0x64, 0x8f, 0x26, 0x7d,
	0x24, 0x9b, 0xaa, 0xa5, 0x8f, 0x54, 0x81, 0x2d, 0xe1, 0x7b, 0x12, 0x6b, 0x4f, 0x4c, 0x1f, 0xe9,
	0x17, 0x26, 0x92, 0xa5, 0xf0, 0x78, 0xea, 0xc8, 0x29, 0x1f, 0x4d, 0xea, 0xc8, 0x3e, 0x9c, 0xd1,
	0xce, 0xf8, 0xe1, 0xcc, 0x17, 0x61, 0xe5, 0x15, 0xc7, 0x21, 0x69, 0xe4, 0x5d, 0x37, 0x61, 0x97,
	0x6a, 0x1f, 0x75, 0x58, 0x6f, 0xc3, 0x6a, 0x82, 0xd3, 0xec, 0xe4, 0xb6, 0x0e, 0x60, 0xa3, 0x83,
	0x87, 0xee, 0x31, 0x26, 0xfc, 0x5f, 0xf3, 0xdc, 0xe1, 0xd9, 0xb0, 0x7e, 0x03, 0xcc, 0x2c, 0x76,
	0x33, 0x04, 0x7c, 0x48, 0xb5, 0x41, 0x9d, 0x7c, 0x5c, 0xb1, 0x72, 0x71, 0x56, 0x2e, 0xf2, 0xaf,
	0xc3, 0x5a, 0x92, 0xef, 0x0c, 0x51, 0xbf, 0x1d, 0xea, 0x85, 0x6e, 0x90, 0xd4, 0xf3, 0x19, 0xa1,
	0xdb, 0xb0, 0x99, 0xc9, 0x7c, 0x86, 0xf8, 0xaf, 0xd1, 0xdb, 0xf7, 0x16, 0xf6, 0x8e, 0xb1, 0x77,
	0xc8, 0x7c, 0x96, 0x74, 0x90, 0xf0, 0x31, 0x6b, 0xf3, 0x24, 0x88, 0x67, 0x78, 0x77, 0x3f, 0x09,
	0x4b, 0x3e, 0x65, 0xde, 0x15, 0xbd, 0x6b, 0xb3, 0xb3, 0xe8, 0x8b, 0x5b, 0x12, 0x5e, 0x7c, 0xd9,
	0x64, 0x1c, 0xf4, 0x79, 0x65, 0x5d, 0xeb, 0xb4, 0xd9, 0xe0, 0x3d, 0x3a, 0xb6, 0xfb, 0xe1, 0x25,
	0x38, 0x97, 0xf8, 0x58, 0x56, 0xbf, 0x0f, 0xb5, 0x81, 0x7b, 0xd4, 0x1f, 0xe9, 0x2f, 0x94, 0x78,
	0x03, 0xf1, 0xcb, 0x0b, 0xf3, 0x33, 0x72, 0x8b, 0xb9, 0x1e, 0xde, 0x83, 0x25, 0xf6, 0x29, 0x48,
	0x97, 0xcf, 0xeb, 0x2f, 0x96, 0xc5, 0x39, 0x19, 0x5f, 0x46, 0x98, 0x97, 0xd5, 0x88, 0xa2, 0xcd,
	0x27, 0xf4, 0x09, 0x97, 0xde, 0x3c, 0xab, 0x45, 0x5f, 0xba, 0x79, 0x76, 0x0b, 0xf9, 0x3d, 0x58,
	0x62, 0x5f, 0xb3, 0x48, 0x6f, 0x9e, 0xd5, 0x13, 0x2e, 0xdd, 0x3c, 0xbb, 0xef, 0xfb, 0x3e, 0x82,
	0xf3, 0x47, 0x38, 0x08, 0xb7, 0xee, 0xde, 0x3f, 0xe9, 0xf6, 0x1d, 0xbd, 0x8c, 0x57, 0x66, 0x33,
	0xd7, 0xfc, 0x9c, 0x22, 0x15, 0x87, 0xf0, 0x43, 0x04, 0x4f, 0x25, 0x20, 0x90, 0x38, 0x4b, 0xbf,
	0xa2, 0xc0, 0x4e, 0xa8, 0x3b, 0x99, 0x7b, 0xca, 0x74, 0x1c, 0xc8, 0xf7, 0x13, 0xba, 0x20, 0x28,
	0x7c, 0x5d, 0x5e, 0x2a, 0xb1, 0x5c, 0x64, 0x5e, 0x51, 0x25, 0xe3, 0x20, 0x7e, 0x84, 0xe0, 0xa9,
	0xf8, 0x45, 0xa0, 0xa5, 0x5c, 0x7d, 0x4f, 0xc5, 0xb0, 0x85, 0xa6, 0x8a, 0x79, 0x55, 0x9d, 0x50,
	0x80, 0x12, 0xbf, 0x16, 0x72, 0x50, 0xf2, 0x9a, 0x84, 0xa5, 0x50, 0xf2, 0xbb, 0x76, 0x1f, 0x22,
	0x78, 0x3a, 0x03, 0x4a, 0x37, 0xec, 0x6e, 0xe9, 0x5f, 0x50, 0x65, 0x9d, 0x68, 0xca, 0x99, 0x37,
	0x4e, 0xcf, 0x40, 0x50, 0x57, 0xfc, 0x22, 0xcb, 0xa9, 0x2b, 0xaf, 0x1d, 0x56, 0xaa, 0xae, 0xfc,
	0xc6, 0xd7, 0x4f, 0x11, 0xac, 0x89, 0x96, 0x4c, 0x75, 0xc5, 0xae, 0xf6, 0x55, 0x69, 0xbb, 0x4c,
	0xb4, 0xb4, 0xcc, 0x97, 0x4e, 0x41, 0xc9, 0xf1, 0xfc, 0x0a, 0xc1, 0x46, 0x16, 0x1e, 0xd6, 0xf2,
	0x7d, 0x59, 0x91, 0xb1, 0xd8, 0x7d, 0x32, 0xaf, 0x9f, 0x8e, 0x38, 0xe7, 0xca, 0xd3, 0xae, 0x89,
	0xc2, 0x95, 0x17, 0x1b, 0x40, 0x0a, 0x57, 0x3e, 0xde, 0xf9, 0x21, 0x20, 0xf8, 0x95, 0x8f, 0xaa,
	0x2b, 0xa5, 0x20, 0xb2, 0xfb, 0x32, 0xa5, 0x20, 0xf2, 0xfa, 0x2c, 0x04, 0x04, 0xbf, 0x61, 0x0a,
	0x20, 0xb2, 0xfb, 0x22, 0xa5, 0x20, 0xf2, 0x5a, 0x15, 0x04, 0x04, 0xbf, 0x42, 0x0a, 0x20, 0xb2,
	0xfb, 0x0f, 0xa5, 0x20, 0xf2, 0xda, 0x0b, 0xdf, 0x86, 0x73, 0xc4, 0x24, 0x22, 0x00, 0x7e, 0xe9,
	0x83, 0x9c, 0xd5, 0x30, 0x30, 0x2f, 0xab, 0x11, 0xf1, 0xdd, 0x7f, 0x80, 0x40, 0x8f, 0x19, 0x03,
	0x0d, 0x89, 0x75, 0x85, 0x63, 0x15, 0x8b, 0xaf, 0xe6, 0x9e, 0x32, 0x9d, 0x80, 0x23, 0x66, 0x0f,
	0x72, 0x38, 0x72, 0xca, 0xe5, 0xe6, 0x9e, 0x32, 0x9d, 0x80, 0x23, 0x66, 0x12, 0x72, 0x38, 0x72,
	0x8a, 0xd1, 0xe6, 0x9e, 0x32, 0x1d, 0xc7, 0xf1, 0x63, 0x04, 0xab, 0x91, 0x59, 0xb0, 0x3c, 0x85,
	0x79, 0xd4, 0x3d, 0xc9, 0x73, 0x4e, 0x96, 0x90, 0xcd, 0xab, 0xea, 0x84, 0x1c, 0xcc, 0x6f, 0x10,
	0x6c, 0x26, 0xc0, 0xf8, 0x61, 0xdc, 0x44, 0x20, 0x5d, 0x57, 0xe1, 0x9c, 0xac, 0xf2, 0x9a, 0x9f,
	0x3f, 0x25, 0x35, 0x07, 0xf7, 0x5d, 0x58, 0x4e, 0x62, 0xd3, 0x2f, 0x2b, 0xb1, 0x54, 0x08, 0x28,
	0xb3, 0x2a, 0xaf, 0x19, 0x21, 0x14, 0x49, 0x14, 0xd5, 0x42, 0x28, 0x21, 0x3d, 0x55, 0x0b, 0xa1,
	0x62, 0xa9, 0x67, 0x46, 0x08, 0x25, 0x05, 0x25, 0xaf, 0x78, 0xa9, 0x16, 0x42, 0xa5, 0xa0, 0x24,
	0xc2, 0x13, 0x29, 0x28, 0x79, 0x05, 0x46, 0xb5, 0xf0, 0x24, 0x06, 0x25, 0x19, 0x9e, 0xd0, 0xac,
	0x5e, 0x35, 0x3c, 0x49, 0x14, 0x09, 0x15, 0xc2, 0x93, 0x54, 0x9d, 0x30, 0x19, 0x05, 0xd0, 0x02,
	0x98, 0x42, 0x14, 0x20, 0xd6, 0xf1, 0x14, 0xa2, 0x80, 0x78, 0x11, 0xef, 0x3b, 0xb0, 0x6c, 0x3b,
	0x0e, 0x0b, 0x8d, 0x02, 0x97, 0x9d, 0x4d, 0xd9, 0xbb, 0x93, 0x55, 0x60, 0x2b, 0x7d, 0x77, 0xb2,
	0x6b, 0x69, 0x3f, 0x41, 0xb0, 0xea, 0xd1, 0x22, 0x0a, 0x83, 0xf0, 0xc0, 0x73, 0x87, 0x0c, 0x44,
	0xd9, 0x91, 0xe4, 0x96, 0xcf, 0x4a, 0x8f, 0xa4, 0xa0, 0x52, 0x46, 0xf2, 0x52, 0xa2, 0x0e, 0xe6,
	0x45, 0x42, 0x7d, 0x48, 0x88, 0x96, 0x2e, 0x8c, 0x95, 0xba, 0x91, 0x9c, 0xb2, 0xd7, 0xcf, 0x10,
	0xac, 0x71, 0x8d, 0x30, 0x14, 0x91, 0x4a, 0xe4, 0x04, 0xcb, 0x2a, 0x75, 0x99, 0xd7, 0x4e, 0x43,
	0x2a, 0xbc, 0x85, 0xc4, 0x4e, 0xe3, 0xc5, 0x1e, 0x99, 0x44, 0x39, 0xab, 0x70, 0x25, 0x93, 0x28,
	0x67, 0xd6, 0xac, 0x5e, 0x7d, 0xf6, 0x6b, 0xe7, 0xc2, 0xc5, 0x7c, 0xed, 0xc7, 0x95, 0x64, 0xd1,
	0xe8, 0xfe, 0x02, 0xfd, 0x7f, 0xe9, 0x17, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xd2, 0x90,
	0xd3, 0x7b, 0x3d, 0x00, 0x00,
}
