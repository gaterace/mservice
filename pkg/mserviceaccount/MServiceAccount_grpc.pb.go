// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mserviceaccount

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MServiceAccountClient is the client API for MServiceAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MServiceAccountClient interface {
	// login as account user and get a json web token
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// create a new account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// update an existing account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// delete an existing account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// get an account by account id
	GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error)
	// get an account by account name
	GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error)
	// get all account names
	GetAccountNames(ctx context.Context, in *GetAccountNamesRequest, opts ...grpc.CallOption) (*GetAccountNamesResponse, error)
	// create an account user
	CreateAccountUser(ctx context.Context, in *CreateAccountUserRequest, opts ...grpc.CallOption) (*CreateAccountUserResponse, error)
	// update an existing account user
	UpdateAccountUser(ctx context.Context, in *UpdateAccountUserRequest, opts ...grpc.CallOption) (*UpdateAccountUserResponse, error)
	// update an existing account user password
	UpdateAccountUserPassword(ctx context.Context, in *UpdateAccountUserPasswordRequest, opts ...grpc.CallOption) (*UpdateAccountUserPasswordResponse, error)
	// reset an existing account user password without knowing old password
	ResetAccountUserPassword(ctx context.Context, in *ResetAccountUserPasswordRequest, opts ...grpc.CallOption) (*ResetAccountUserPasswordResponse, error)
	// delete an existing account user
	DeleteAccountUser(ctx context.Context, in *DeleteAccountUserRequest, opts ...grpc.CallOption) (*DeleteAccountUserResponse, error)
	// get an account user by id
	GetAccountUserById(ctx context.Context, in *GetAccountUserByIdRequest, opts ...grpc.CallOption) (*GetAccountUserByIdResponse, error)
	// get an account user by email
	GetAccountUserByEmail(ctx context.Context, in *GetAccountUserByEmailRequest, opts ...grpc.CallOption) (*GetAccountUserByEmailResponse, error)
	// get all account users in account
	GetAccountUsers(ctx context.Context, in *GetAccountUsersRequest, opts ...grpc.CallOption) (*GetAccountUsersResponse, error)
	// create a claim name
	CreateClaimName(ctx context.Context, in *CreateClaimNameRequest, opts ...grpc.CallOption) (*CreateClaimNameResponse, error)
	// update an existing claim name
	UpdateClaimName(ctx context.Context, in *UpdateClaimNameRequest, opts ...grpc.CallOption) (*UpdateClaimNameResponse, error)
	// delete an existing claim name
	DeleteClaimName(ctx context.Context, in *DeleteClaimNameRequest, opts ...grpc.CallOption) (*DeleteClaimNameResponse, error)
	// get claim name by id
	GetClaimNameById(ctx context.Context, in *GetClaimNameByIdRequest, opts ...grpc.CallOption) (*GetClaimNameByIdResponse, error)
	// get all claim names
	GetClaimNames(ctx context.Context, in *GetClaimNamesRequest, opts ...grpc.CallOption) (*GetClaimNamesResponse, error)
	// create claim value
	CreateClaimValue(ctx context.Context, in *CreateClaimValueRequest, opts ...grpc.CallOption) (*CreateClaimValueResponse, error)
	// update existing claim value
	UpdateClaimValue(ctx context.Context, in *UpdateClaimValueRequest, opts ...grpc.CallOption) (*UpdateClaimValueResponse, error)
	// delete existing claim value
	DeleteClaimValue(ctx context.Context, in *DeleteClaimValueRequest, opts ...grpc.CallOption) (*DeleteClaimValueResponse, error)
	// get claim value by id
	GetClaimValueById(ctx context.Context, in *GetClaimValueByIdRequest, opts ...grpc.CallOption) (*GetClaimValueByIdResponse, error)
	// get all claim values for name id
	GetClaimValuesByNameId(ctx context.Context, in *GetClaimValuesByNameIdRequest, opts ...grpc.CallOption) (*GetClaimValuesByNameIdResponse, error)
	// get all claim values for all claim names
	GetClaimValues(ctx context.Context, in *GetClaimValuesRequest, opts ...grpc.CallOption) (*GetClaimValuesResponse, error)
	// create account role
	CreateAccountRole(ctx context.Context, in *CreateAccountRoleRequest, opts ...grpc.CallOption) (*CreateAccountRoleResponse, error)
	// update existing account role
	UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error)
	// delete existing account role
	DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error)
	// get account role by id
	GetAccountRoleById(ctx context.Context, in *GetAccountRoleByIdRequest, opts ...grpc.CallOption) (*GetAccountRoleByIdResponse, error)
	// get all account roles in account
	GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...grpc.CallOption) (*GetAccountRolesResponse, error)
	// associate an account user with an account role
	AddUserToRole(ctx context.Context, in *AddUserToRoleRequest, opts ...grpc.CallOption) (*AddUserToRoleResponse, error)
	// disassociate an account user from an account role
	RemoveUserFromRole(ctx context.Context, in *RemoveUserFromRoleRequest, opts ...grpc.CallOption) (*RemoveUserFromRoleResponse, error)
	// associate a claim with an account role
	AddClaimToRole(ctx context.Context, in *AddClaimToRoleRequest, opts ...grpc.CallOption) (*AddClaimToRoleResponse, error)
	// remove a claim from an account role
	RemoveClaimFromRole(ctx context.Context, in *RemoveClaimFromRoleRequest, opts ...grpc.CallOption) (*RemoveClaimFromRoleResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
}

type mServiceAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewMServiceAccountClient(cc grpc.ClientConnInterface) MServiceAccountClient {
	return &mServiceAccountClient{cc}
}

func (c *mServiceAccountClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error) {
	out := new(GetAccountByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountByName(ctx context.Context, in *GetAccountByNameRequest, opts ...grpc.CallOption) (*GetAccountByNameResponse, error) {
	out := new(GetAccountByNameResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_by_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountNames(ctx context.Context, in *GetAccountNamesRequest, opts ...grpc.CallOption) (*GetAccountNamesResponse, error) {
	out := new(GetAccountNamesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_names", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateAccountUser(ctx context.Context, in *CreateAccountUserRequest, opts ...grpc.CallOption) (*CreateAccountUserResponse, error) {
	out := new(CreateAccountUserResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_account_user", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccountUser(ctx context.Context, in *UpdateAccountUserRequest, opts ...grpc.CallOption) (*UpdateAccountUserResponse, error) {
	out := new(UpdateAccountUserResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account_user", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccountUserPassword(ctx context.Context, in *UpdateAccountUserPasswordRequest, opts ...grpc.CallOption) (*UpdateAccountUserPasswordResponse, error) {
	out := new(UpdateAccountUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account_user_password", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) ResetAccountUserPassword(ctx context.Context, in *ResetAccountUserPasswordRequest, opts ...grpc.CallOption) (*ResetAccountUserPasswordResponse, error) {
	out := new(ResetAccountUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/reset_account_user_password", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserRequest, opts ...grpc.CallOption) (*DeleteAccountUserResponse, error) {
	out := new(DeleteAccountUserResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_account_user", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountUserById(ctx context.Context, in *GetAccountUserByIdRequest, opts ...grpc.CallOption) (*GetAccountUserByIdResponse, error) {
	out := new(GetAccountUserByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_user_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountUserByEmail(ctx context.Context, in *GetAccountUserByEmailRequest, opts ...grpc.CallOption) (*GetAccountUserByEmailResponse, error) {
	out := new(GetAccountUserByEmailResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_user_by_email", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountUsers(ctx context.Context, in *GetAccountUsersRequest, opts ...grpc.CallOption) (*GetAccountUsersResponse, error) {
	out := new(GetAccountUsersResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_users", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateClaimName(ctx context.Context, in *CreateClaimNameRequest, opts ...grpc.CallOption) (*CreateClaimNameResponse, error) {
	out := new(CreateClaimNameResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_claim_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateClaimName(ctx context.Context, in *UpdateClaimNameRequest, opts ...grpc.CallOption) (*UpdateClaimNameResponse, error) {
	out := new(UpdateClaimNameResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_claim_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteClaimName(ctx context.Context, in *DeleteClaimNameRequest, opts ...grpc.CallOption) (*DeleteClaimNameResponse, error) {
	out := new(DeleteClaimNameResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_claim_name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimNameById(ctx context.Context, in *GetClaimNameByIdRequest, opts ...grpc.CallOption) (*GetClaimNameByIdResponse, error) {
	out := new(GetClaimNameByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_name_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimNames(ctx context.Context, in *GetClaimNamesRequest, opts ...grpc.CallOption) (*GetClaimNamesResponse, error) {
	out := new(GetClaimNamesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_names", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateClaimValue(ctx context.Context, in *CreateClaimValueRequest, opts ...grpc.CallOption) (*CreateClaimValueResponse, error) {
	out := new(CreateClaimValueResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_claim_value", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateClaimValue(ctx context.Context, in *UpdateClaimValueRequest, opts ...grpc.CallOption) (*UpdateClaimValueResponse, error) {
	out := new(UpdateClaimValueResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_claim_value", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteClaimValue(ctx context.Context, in *DeleteClaimValueRequest, opts ...grpc.CallOption) (*DeleteClaimValueResponse, error) {
	out := new(DeleteClaimValueResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_claim_value", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimValueById(ctx context.Context, in *GetClaimValueByIdRequest, opts ...grpc.CallOption) (*GetClaimValueByIdResponse, error) {
	out := new(GetClaimValueByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_value_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimValuesByNameId(ctx context.Context, in *GetClaimValuesByNameIdRequest, opts ...grpc.CallOption) (*GetClaimValuesByNameIdResponse, error) {
	out := new(GetClaimValuesByNameIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_values_by_name_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetClaimValues(ctx context.Context, in *GetClaimValuesRequest, opts ...grpc.CallOption) (*GetClaimValuesResponse, error) {
	out := new(GetClaimValuesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_claim_values", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) CreateAccountRole(ctx context.Context, in *CreateAccountRoleRequest, opts ...grpc.CallOption) (*CreateAccountRoleResponse, error) {
	out := new(CreateAccountRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/create_account_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*UpdateAccountRoleResponse, error) {
	out := new(UpdateAccountRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/update_account_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*DeleteAccountRoleResponse, error) {
	out := new(DeleteAccountRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/delete_account_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountRoleById(ctx context.Context, in *GetAccountRoleByIdRequest, opts ...grpc.CallOption) (*GetAccountRoleByIdResponse, error) {
	out := new(GetAccountRoleByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_role_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetAccountRoles(ctx context.Context, in *GetAccountRolesRequest, opts ...grpc.CallOption) (*GetAccountRolesResponse, error) {
	out := new(GetAccountRolesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_account_roles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) AddUserToRole(ctx context.Context, in *AddUserToRoleRequest, opts ...grpc.CallOption) (*AddUserToRoleResponse, error) {
	out := new(AddUserToRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/add_user_to_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) RemoveUserFromRole(ctx context.Context, in *RemoveUserFromRoleRequest, opts ...grpc.CallOption) (*RemoveUserFromRoleResponse, error) {
	out := new(RemoveUserFromRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/remove_user_from_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) AddClaimToRole(ctx context.Context, in *AddClaimToRoleRequest, opts ...grpc.CallOption) (*AddClaimToRoleResponse, error) {
	out := new(AddClaimToRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/add_claim_to_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) RemoveClaimFromRole(ctx context.Context, in *RemoveClaimFromRoleRequest, opts ...grpc.CallOption) (*RemoveClaimFromRoleResponse, error) {
	out := new(RemoveClaimFromRoleResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/remove_claim_from_role", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAccountClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.account.MServiceAccount/get_server_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MServiceAccountServer is the server API for MServiceAccount service.
// All implementations must embed UnimplementedMServiceAccountServer
// for forward compatibility
type MServiceAccountServer interface {
	// login as account user and get a json web token
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// create a new account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// update an existing account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// delete an existing account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// get an account by account id
	GetAccountById(context.Context, *GetAccountByIdRequest) (*GetAccountByIdResponse, error)
	// get an account by account name
	GetAccountByName(context.Context, *GetAccountByNameRequest) (*GetAccountByNameResponse, error)
	// get all account names
	GetAccountNames(context.Context, *GetAccountNamesRequest) (*GetAccountNamesResponse, error)
	// create an account user
	CreateAccountUser(context.Context, *CreateAccountUserRequest) (*CreateAccountUserResponse, error)
	// update an existing account user
	UpdateAccountUser(context.Context, *UpdateAccountUserRequest) (*UpdateAccountUserResponse, error)
	// update an existing account user password
	UpdateAccountUserPassword(context.Context, *UpdateAccountUserPasswordRequest) (*UpdateAccountUserPasswordResponse, error)
	// reset an existing account user password without knowing old password
	ResetAccountUserPassword(context.Context, *ResetAccountUserPasswordRequest) (*ResetAccountUserPasswordResponse, error)
	// delete an existing account user
	DeleteAccountUser(context.Context, *DeleteAccountUserRequest) (*DeleteAccountUserResponse, error)
	// get an account user by id
	GetAccountUserById(context.Context, *GetAccountUserByIdRequest) (*GetAccountUserByIdResponse, error)
	// get an account user by email
	GetAccountUserByEmail(context.Context, *GetAccountUserByEmailRequest) (*GetAccountUserByEmailResponse, error)
	// get all account users in account
	GetAccountUsers(context.Context, *GetAccountUsersRequest) (*GetAccountUsersResponse, error)
	// create a claim name
	CreateClaimName(context.Context, *CreateClaimNameRequest) (*CreateClaimNameResponse, error)
	// update an existing claim name
	UpdateClaimName(context.Context, *UpdateClaimNameRequest) (*UpdateClaimNameResponse, error)
	// delete an existing claim name
	DeleteClaimName(context.Context, *DeleteClaimNameRequest) (*DeleteClaimNameResponse, error)
	// get claim name by id
	GetClaimNameById(context.Context, *GetClaimNameByIdRequest) (*GetClaimNameByIdResponse, error)
	// get all claim names
	GetClaimNames(context.Context, *GetClaimNamesRequest) (*GetClaimNamesResponse, error)
	// create claim value
	CreateClaimValue(context.Context, *CreateClaimValueRequest) (*CreateClaimValueResponse, error)
	// update existing claim value
	UpdateClaimValue(context.Context, *UpdateClaimValueRequest) (*UpdateClaimValueResponse, error)
	// delete existing claim value
	DeleteClaimValue(context.Context, *DeleteClaimValueRequest) (*DeleteClaimValueResponse, error)
	// get claim value by id
	GetClaimValueById(context.Context, *GetClaimValueByIdRequest) (*GetClaimValueByIdResponse, error)
	// get all claim values for name id
	GetClaimValuesByNameId(context.Context, *GetClaimValuesByNameIdRequest) (*GetClaimValuesByNameIdResponse, error)
	// get all claim values for all claim names
	GetClaimValues(context.Context, *GetClaimValuesRequest) (*GetClaimValuesResponse, error)
	// create account role
	CreateAccountRole(context.Context, *CreateAccountRoleRequest) (*CreateAccountRoleResponse, error)
	// update existing account role
	UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error)
	// delete existing account role
	DeleteAccountRole(context.Context, *DeleteAccountRoleRequest) (*DeleteAccountRoleResponse, error)
	// get account role by id
	GetAccountRoleById(context.Context, *GetAccountRoleByIdRequest) (*GetAccountRoleByIdResponse, error)
	// get all account roles in account
	GetAccountRoles(context.Context, *GetAccountRolesRequest) (*GetAccountRolesResponse, error)
	// associate an account user with an account role
	AddUserToRole(context.Context, *AddUserToRoleRequest) (*AddUserToRoleResponse, error)
	// disassociate an account user from an account role
	RemoveUserFromRole(context.Context, *RemoveUserFromRoleRequest) (*RemoveUserFromRoleResponse, error)
	// associate a claim with an account role
	AddClaimToRole(context.Context, *AddClaimToRoleRequest) (*AddClaimToRoleResponse, error)
	// remove a claim from an account role
	RemoveClaimFromRole(context.Context, *RemoveClaimFromRoleRequest) (*RemoveClaimFromRoleResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
	mustEmbedUnimplementedMServiceAccountServer()
}

// UnimplementedMServiceAccountServer must be embedded to have forward compatible implementations.
type UnimplementedMServiceAccountServer struct {
}

func (UnimplementedMServiceAccountServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMServiceAccountServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedMServiceAccountServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedMServiceAccountServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountById(context.Context, *GetAccountByIdRequest) (*GetAccountByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountByName(context.Context, *GetAccountByNameRequest) (*GetAccountByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByName not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountNames(context.Context, *GetAccountNamesRequest) (*GetAccountNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountNames not implemented")
}
func (UnimplementedMServiceAccountServer) CreateAccountUser(context.Context, *CreateAccountUserRequest) (*CreateAccountUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountUser not implemented")
}
func (UnimplementedMServiceAccountServer) UpdateAccountUser(context.Context, *UpdateAccountUserRequest) (*UpdateAccountUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountUser not implemented")
}
func (UnimplementedMServiceAccountServer) UpdateAccountUserPassword(context.Context, *UpdateAccountUserPasswordRequest) (*UpdateAccountUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountUserPassword not implemented")
}
func (UnimplementedMServiceAccountServer) ResetAccountUserPassword(context.Context, *ResetAccountUserPasswordRequest) (*ResetAccountUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAccountUserPassword not implemented")
}
func (UnimplementedMServiceAccountServer) DeleteAccountUser(context.Context, *DeleteAccountUserRequest) (*DeleteAccountUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountUser not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountUserById(context.Context, *GetAccountUserByIdRequest) (*GetAccountUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUserById not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountUserByEmail(context.Context, *GetAccountUserByEmailRequest) (*GetAccountUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUserByEmail not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountUsers(context.Context, *GetAccountUsersRequest) (*GetAccountUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUsers not implemented")
}
func (UnimplementedMServiceAccountServer) CreateClaimName(context.Context, *CreateClaimNameRequest) (*CreateClaimNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClaimName not implemented")
}
func (UnimplementedMServiceAccountServer) UpdateClaimName(context.Context, *UpdateClaimNameRequest) (*UpdateClaimNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClaimName not implemented")
}
func (UnimplementedMServiceAccountServer) DeleteClaimName(context.Context, *DeleteClaimNameRequest) (*DeleteClaimNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClaimName not implemented")
}
func (UnimplementedMServiceAccountServer) GetClaimNameById(context.Context, *GetClaimNameByIdRequest) (*GetClaimNameByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimNameById not implemented")
}
func (UnimplementedMServiceAccountServer) GetClaimNames(context.Context, *GetClaimNamesRequest) (*GetClaimNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimNames not implemented")
}
func (UnimplementedMServiceAccountServer) CreateClaimValue(context.Context, *CreateClaimValueRequest) (*CreateClaimValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClaimValue not implemented")
}
func (UnimplementedMServiceAccountServer) UpdateClaimValue(context.Context, *UpdateClaimValueRequest) (*UpdateClaimValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClaimValue not implemented")
}
func (UnimplementedMServiceAccountServer) DeleteClaimValue(context.Context, *DeleteClaimValueRequest) (*DeleteClaimValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClaimValue not implemented")
}
func (UnimplementedMServiceAccountServer) GetClaimValueById(context.Context, *GetClaimValueByIdRequest) (*GetClaimValueByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimValueById not implemented")
}
func (UnimplementedMServiceAccountServer) GetClaimValuesByNameId(context.Context, *GetClaimValuesByNameIdRequest) (*GetClaimValuesByNameIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimValuesByNameId not implemented")
}
func (UnimplementedMServiceAccountServer) GetClaimValues(context.Context, *GetClaimValuesRequest) (*GetClaimValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimValues not implemented")
}
func (UnimplementedMServiceAccountServer) CreateAccountRole(context.Context, *CreateAccountRoleRequest) (*CreateAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountRole not implemented")
}
func (UnimplementedMServiceAccountServer) UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*UpdateAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountRole not implemented")
}
func (UnimplementedMServiceAccountServer) DeleteAccountRole(context.Context, *DeleteAccountRoleRequest) (*DeleteAccountRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountRole not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountRoleById(context.Context, *GetAccountRoleByIdRequest) (*GetAccountRoleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRoleById not implemented")
}
func (UnimplementedMServiceAccountServer) GetAccountRoles(context.Context, *GetAccountRolesRequest) (*GetAccountRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRoles not implemented")
}
func (UnimplementedMServiceAccountServer) AddUserToRole(context.Context, *AddUserToRoleRequest) (*AddUserToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToRole not implemented")
}
func (UnimplementedMServiceAccountServer) RemoveUserFromRole(context.Context, *RemoveUserFromRoleRequest) (*RemoveUserFromRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromRole not implemented")
}
func (UnimplementedMServiceAccountServer) AddClaimToRole(context.Context, *AddClaimToRoleRequest) (*AddClaimToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClaimToRole not implemented")
}
func (UnimplementedMServiceAccountServer) RemoveClaimFromRole(context.Context, *RemoveClaimFromRoleRequest) (*RemoveClaimFromRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClaimFromRole not implemented")
}
func (UnimplementedMServiceAccountServer) GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerVersion not implemented")
}
func (UnimplementedMServiceAccountServer) mustEmbedUnimplementedMServiceAccountServer() {}

// UnsafeMServiceAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MServiceAccountServer will
// result in compilation errors.
type UnsafeMServiceAccountServer interface {
	mustEmbedUnimplementedMServiceAccountServer()
}

func RegisterMServiceAccountServer(s grpc.ServiceRegistrar, srv MServiceAccountServer) {
	s.RegisterService(&MServiceAccount_ServiceDesc, srv)
}

func _MServiceAccount_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/create_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/update_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/delete_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountById(ctx, req.(*GetAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_by_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountByName(ctx, req.(*GetAccountByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_names",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountNames(ctx, req.(*GetAccountNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/create_account_user",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateAccountUser(ctx, req.(*CreateAccountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/update_account_user",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccountUser(ctx, req.(*UpdateAccountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccountUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccountUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/update_account_user_password",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccountUserPassword(ctx, req.(*UpdateAccountUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_ResetAccountUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetAccountUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).ResetAccountUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/reset_account_user_password",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).ResetAccountUserPassword(ctx, req.(*ResetAccountUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/delete_account_user",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteAccountUser(ctx, req.(*DeleteAccountUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_user_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountUserById(ctx, req.(*GetAccountUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_user_by_email",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountUserByEmail(ctx, req.(*GetAccountUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_users",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountUsers(ctx, req.(*GetAccountUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateClaimName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClaimNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateClaimName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/create_claim_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateClaimName(ctx, req.(*CreateClaimNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateClaimName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClaimNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateClaimName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/update_claim_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateClaimName(ctx, req.(*UpdateClaimNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteClaimName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClaimNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteClaimName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/delete_claim_name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteClaimName(ctx, req.(*DeleteClaimNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimNameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimNameByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimNameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_claim_name_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimNameById(ctx, req.(*GetClaimNameByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_claim_names",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimNames(ctx, req.(*GetClaimNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateClaimValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClaimValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateClaimValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/create_claim_value",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateClaimValue(ctx, req.(*CreateClaimValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateClaimValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClaimValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateClaimValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/update_claim_value",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateClaimValue(ctx, req.(*UpdateClaimValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteClaimValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClaimValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteClaimValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/delete_claim_value",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteClaimValue(ctx, req.(*DeleteClaimValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimValueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimValueByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimValueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_claim_value_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimValueById(ctx, req.(*GetClaimValueByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimValuesByNameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimValuesByNameIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimValuesByNameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_claim_values_by_name_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimValuesByNameId(ctx, req.(*GetClaimValuesByNameIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetClaimValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetClaimValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_claim_values",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetClaimValues(ctx, req.(*GetClaimValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_CreateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).CreateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/create_account_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).CreateAccountRole(ctx, req.(*CreateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_UpdateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).UpdateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/update_account_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).UpdateAccountRole(ctx, req.(*UpdateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_DeleteAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).DeleteAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/delete_account_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).DeleteAccountRole(ctx, req.(*DeleteAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRoleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_role_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountRoleById(ctx, req.(*GetAccountRoleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetAccountRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetAccountRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_account_roles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetAccountRoles(ctx, req.(*GetAccountRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_AddUserToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).AddUserToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/add_user_to_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).AddUserToRole(ctx, req.(*AddUserToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_RemoveUserFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).RemoveUserFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/remove_user_from_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).RemoveUserFromRole(ctx, req.(*RemoveUserFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_AddClaimToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClaimToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).AddClaimToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/add_claim_to_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).AddClaimToRole(ctx, req.(*AddClaimToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_RemoveClaimFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClaimFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).RemoveClaimFromRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/remove_claim_from_role",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).RemoveClaimFromRole(ctx, req.(*RemoveClaimFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAccount_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAccountServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.account.MServiceAccount/get_server_version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAccountServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MServiceAccount_ServiceDesc is the grpc.ServiceDesc for MServiceAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MServiceAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.account.MServiceAccount",
	HandlerType: (*MServiceAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "login",
			Handler:    _MServiceAccount_Login_Handler,
		},
		{
			MethodName: "create_account",
			Handler:    _MServiceAccount_CreateAccount_Handler,
		},
		{
			MethodName: "update_account",
			Handler:    _MServiceAccount_UpdateAccount_Handler,
		},
		{
			MethodName: "delete_account",
			Handler:    _MServiceAccount_DeleteAccount_Handler,
		},
		{
			MethodName: "get_account_by_id",
			Handler:    _MServiceAccount_GetAccountById_Handler,
		},
		{
			MethodName: "get_account_by_name",
			Handler:    _MServiceAccount_GetAccountByName_Handler,
		},
		{
			MethodName: "get_account_names",
			Handler:    _MServiceAccount_GetAccountNames_Handler,
		},
		{
			MethodName: "create_account_user",
			Handler:    _MServiceAccount_CreateAccountUser_Handler,
		},
		{
			MethodName: "update_account_user",
			Handler:    _MServiceAccount_UpdateAccountUser_Handler,
		},
		{
			MethodName: "update_account_user_password",
			Handler:    _MServiceAccount_UpdateAccountUserPassword_Handler,
		},
		{
			MethodName: "reset_account_user_password",
			Handler:    _MServiceAccount_ResetAccountUserPassword_Handler,
		},
		{
			MethodName: "delete_account_user",
			Handler:    _MServiceAccount_DeleteAccountUser_Handler,
		},
		{
			MethodName: "get_account_user_by_id",
			Handler:    _MServiceAccount_GetAccountUserById_Handler,
		},
		{
			MethodName: "get_account_user_by_email",
			Handler:    _MServiceAccount_GetAccountUserByEmail_Handler,
		},
		{
			MethodName: "get_account_users",
			Handler:    _MServiceAccount_GetAccountUsers_Handler,
		},
		{
			MethodName: "create_claim_name",
			Handler:    _MServiceAccount_CreateClaimName_Handler,
		},
		{
			MethodName: "update_claim_name",
			Handler:    _MServiceAccount_UpdateClaimName_Handler,
		},
		{
			MethodName: "delete_claim_name",
			Handler:    _MServiceAccount_DeleteClaimName_Handler,
		},
		{
			MethodName: "get_claim_name_by_id",
			Handler:    _MServiceAccount_GetClaimNameById_Handler,
		},
		{
			MethodName: "get_claim_names",
			Handler:    _MServiceAccount_GetClaimNames_Handler,
		},
		{
			MethodName: "create_claim_value",
			Handler:    _MServiceAccount_CreateClaimValue_Handler,
		},
		{
			MethodName: "update_claim_value",
			Handler:    _MServiceAccount_UpdateClaimValue_Handler,
		},
		{
			MethodName: "delete_claim_value",
			Handler:    _MServiceAccount_DeleteClaimValue_Handler,
		},
		{
			MethodName: "get_claim_value_by_id",
			Handler:    _MServiceAccount_GetClaimValueById_Handler,
		},
		{
			MethodName: "get_claim_values_by_name_id",
			Handler:    _MServiceAccount_GetClaimValuesByNameId_Handler,
		},
		{
			MethodName: "get_claim_values",
			Handler:    _MServiceAccount_GetClaimValues_Handler,
		},
		{
			MethodName: "create_account_role",
			Handler:    _MServiceAccount_CreateAccountRole_Handler,
		},
		{
			MethodName: "update_account_role",
			Handler:    _MServiceAccount_UpdateAccountRole_Handler,
		},
		{
			MethodName: "delete_account_role",
			Handler:    _MServiceAccount_DeleteAccountRole_Handler,
		},
		{
			MethodName: "get_account_role_by_id",
			Handler:    _MServiceAccount_GetAccountRoleById_Handler,
		},
		{
			MethodName: "get_account_roles",
			Handler:    _MServiceAccount_GetAccountRoles_Handler,
		},
		{
			MethodName: "add_user_to_role",
			Handler:    _MServiceAccount_AddUserToRole_Handler,
		},
		{
			MethodName: "remove_user_from_role",
			Handler:    _MServiceAccount_RemoveUserFromRole_Handler,
		},
		{
			MethodName: "add_claim_to_role",
			Handler:    _MServiceAccount_AddClaimToRole_Handler,
		},
		{
			MethodName: "remove_claim_from_role",
			Handler:    _MServiceAccount_RemoveClaimFromRole_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceAccount_GetServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceAccount.proto",
}
